2021-07-07 01:05:19:298 grammar LogManager.java:25 load Tokens from Cirno.g4
2021-07-07 01:05:19:303 grammar LogManager.java:25 before: (COMBINED_GRAMMAR Cirno (import Tokens) (RULES (RULE inicio (BLOCK (ALT PROCEDIMENTO VAZIO PROCEDIMENTOPRINCIPAL INICIO_PARENTESES (* (BLOCK (ALT declaracao))) FIM_PARENTESES INICIO_CHAVES (? (BLOCK (ALT blocoDeComando))) FIM_CHAVES))) (RULE declaracao (BLOCK (ALT tipoPrimitivo SEPARADOR_DEFINICAO_VARIAVEL (= identifier ID) FIM_LINHA))) (RULE atribuicao (BLOCK (ALT (= identifier ID) ATRIBUICAO (BLOCK (ALT operacoes) (ALT (= identifier ID)) (ALT VALOR)) FIM_LINHA))) (RULE declaracaoComAtribuicao (BLOCK (ALT tipoPrimitivo SEPARADOR_DEFINICAO_VARIAVEL ID ATRIBUICAO (BLOCK (ALT operacoes) (ALT (= identifier ID)) (ALT VALOR)) FIM_LINHA))) (RULE declaracaoDeVariavel (BLOCK (ALT (BLOCK (ALT declaracao) (ALT declaracaoComAtribuicao) (ALT atribuicao))))) (RULE blocoDeComando (BLOCK (ALT (* (BLOCK (ALT declaracaoDeVariavel) (ALT operacoes FIM_LINHA) (ALT declaracoes) (ALT comando)))))) (RULE comando (BLOCK (ALT funcoes FIM_LINHA))) (RULE funcoes (BLOCK (ALT funcaoLer) (ALT funcaoEscrever))) (RULE funcaoLer (BLOCK (ALT LEIA INICIO_PARENTESES VALOR FIM_PARENTESES))) (RULE funcaoEscrever (BLOCK (ALT IMPRIMA INICIO_PARENTESES parametro FIM_PARENTESES))) (RULE parametro (BLOCK (ALT (* (BLOCK (ALT ID) (ALT VALOR) (ALT operacoes)))))) (RULE operacoes (BLOCK (ALT parametroOperacao operacaoAritmetica parametroOperacao))) (RULE parametroOperacao (BLOCK (ALT (BLOCK (ALT ID) (ALT VALOR))))) (RULE declaracoes (BLOCK (ALT declaracaoSe) (ALT declaracaoPara) (ALT declaracaoRepitaEnquanto) (ALT declaracaoEnquantoExecute) (ALT declaracaoQuandoFor))) (RULE condicional (BLOCK (ALT (? (BLOCK (ALT operadorLogicoUnitario))) (BLOCK (ALT ID) (ALT VALOR)) operacaoRelacao (? (BLOCK (ALT operadorLogicoUnitario))) (BLOCK (ALT ID) (ALT VALOR)) (? (BLOCK (ALT operadorLogicoBinario condicional)))))) (RULE declaracaoSe (BLOCK (ALT inicioSe (? (BLOCK (ALT seEntao)))))) (RULE inicioSe (BLOCK (ALT SE INICIO_PARENTESES condicional FIM_PARENTESES INICIO_CHAVES (? (BLOCK (ALT blocoDeComando))) FIM_CHAVES))) (RULE seEntao (BLOCK (ALT CONTUDO INICIO_CHAVES (? (BLOCK (ALT blocoDeComando))) FIM_CHAVES))) (RULE declaracaoPara (BLOCK (ALT PARA condicionalPara INICIO_CHAVES (? (BLOCK (ALT blocoDeComando))) FIM_CHAVES))) (RULE condicionalPara (BLOCK (ALT INICIO_PARENTESES condicionalInicioPara SEPARADOR_PARAMETRO condicional SEPARADOR_PARAMETRO condicionalIncrementoPara FIM_PARENTESES))) (RULE condicionalInicioPara (BLOCK (ALT tipoPrimitivo SEPARADOR_DEFINICAO_VARIAVEL atribuicaoFor) (ALT atribuicaoFor) (ALT ID))) (RULE condicionalIncrementoPara (BLOCK (ALT incrementoFor))) (RULE atribuicaoFor (BLOCK (ALT (? (BLOCK (ALT tipoPrimitivo SEPARADOR_DEFINICAO_VARIAVEL))) ID (? (BLOCK (ALT ATRIBUICAO (BLOCK (ALT (= identifier ID)) (ALT VALOR) (ALT operacoes)))))))) (RULE incrementoFor (BLOCK (ALT (= identifier ID) ATRIBUICAO operacoes))) (RULE declaracaoRepitaEnquanto (BLOCK (ALT REPITA INICIO_CHAVES (? (BLOCK (ALT blocoDeComando))) FIM_CHAVES ENQUANTO INICIO_PARENTESES condicional FIM_PARENTESES))) (RULE declaracaoEnquantoExecute (BLOCK (ALT ENQUANTO INICIO_PARENTESES condicional FIM_PARENTESES EXECUTE INICIO_CHAVES (? (BLOCK (ALT blocoDeComando))) FIM_CHAVES))) (RULE declaracaoQuandoFor (BLOCK (ALT inicioQuandoFor (+ (BLOCK (ALT forFor))) FINALIZE FIM_LINHA))) (RULE inicioQuandoFor (BLOCK (ALT QUANDO INICIO_PARENTESES ID FIM_PARENTESES SEPARADOR_DEFINICAO_VARIAVEL))) (RULE forFor (BLOCK (ALT FOR NICIO_PARENTESES ID FIM_PARENTESES INICIO_CHAVES (? (BLOCK (ALT blocoDeComando))) FIM_CHAVES))) (RULE tipoPrimitivo (BLOCK (ALT INTEIRO) (ALT INTEIRO_POSITIVO) (ALT INTEIRO_NEGATIVO) (ALT RACIONAL) (ALT RACIONAL_POSITIVO) (ALT RACIONAL_NEGATIVO) (ALT CARACTERE) (ALT TEXTO) (ALT BOOLEANO))) (RULE operacaoAritmetica (BLOCK (ALT operacaoMultiplicacao) (ALT operacaoAdicao))) (RULE operacaoAdicao (BLOCK (ALT SOMA) (ALT SUBTRACAO))) (RULE operacaoMultiplicacao (BLOCK (ALT MULTIPLICACAO) (ALT DIVISAO) (ALT MODULO))) (RULE operacaoRelacao (BLOCK (ALT operacaoIgualdade) (ALT operacaoComparacao))) (RULE operacaoIgualdade (BLOCK (ALT IGUAL) (ALT DIFERENTE) (ALT MAIOR_IGUAL) (ALT MENOR_IGUAL))) (RULE operacaoComparacao (BLOCK (ALT MAIOR) (ALT MENOR))) (RULE operadorLogicoBinario (BLOCK (ALT E) (ALT OU))) (RULE operadorLogicoUnitario (BLOCK (ALT NAO)))))
2021-07-07 01:05:19:305 grammar LogManager.java:25 imported actions: []
2021-07-07 01:05:19:306 grammar LogManager.java:25 imported rule: (RULE PROCEDIMENTO (BLOCK (ALT 'func')))
2021-07-07 01:05:19:306 grammar LogManager.java:25 imported rule: (RULE PROCEDIMENTOPRINCIPAL (BLOCK (ALT 'inicio')))
2021-07-07 01:05:19:306 grammar LogManager.java:25 imported rule: (RULE INTEIRO (BLOCK (ALT 'inteiro')))
2021-07-07 01:05:19:306 grammar LogManager.java:25 imported rule: (RULE INTEIRO_POSITIVO (BLOCK (ALT 'inteiro+')))
2021-07-07 01:05:19:306 grammar LogManager.java:25 imported rule: (RULE INTEIRO_NEGATIVO (BLOCK (ALT 'inteiro-')))
2021-07-07 01:05:19:306 grammar LogManager.java:25 imported rule: (RULE RACIONAL (BLOCK (ALT 'racional')))
2021-07-07 01:05:19:306 grammar LogManager.java:25 imported rule: (RULE RACIONAL_POSITIVO (BLOCK (ALT 'racional+')))
2021-07-07 01:05:19:306 grammar LogManager.java:25 imported rule: (RULE RACIONAL_NEGATIVO (BLOCK (ALT 'racional-')))
2021-07-07 01:05:19:306 grammar LogManager.java:25 imported rule: (RULE CARACTERE (BLOCK (ALT 'caractere')))
2021-07-07 01:05:19:306 grammar LogManager.java:25 imported rule: (RULE TEXTO (BLOCK (ALT 'texto')))
2021-07-07 01:05:19:306 grammar LogManager.java:25 imported rule: (RULE BOOLEANO (BLOCK (ALT 'booleano')))
2021-07-07 01:05:19:306 grammar LogManager.java:25 imported rule: (RULE VAZIO (BLOCK (ALT 'vazio')))
2021-07-07 01:05:19:306 grammar LogManager.java:25 imported rule: (RULE SE (BLOCK (ALT 'se')))
2021-07-07 01:05:19:306 grammar LogManager.java:25 imported rule: (RULE CONTUDO (BLOCK (ALT 'contudo')))
2021-07-07 01:05:19:306 grammar LogManager.java:25 imported rule: (RULE QUANDO (BLOCK (ALT 'quando')))
2021-07-07 01:05:19:306 grammar LogManager.java:25 imported rule: (RULE FINALIZE (BLOCK (ALT 'finalize')))
2021-07-07 01:05:19:306 grammar LogManager.java:25 imported rule: (RULE FOR (BLOCK (ALT 'for')))
2021-07-07 01:05:19:306 grammar LogManager.java:25 imported rule: (RULE PARA (BLOCK (ALT 'para')))
2021-07-07 01:05:19:306 grammar LogManager.java:25 imported rule: (RULE ENQUANTO (BLOCK (ALT 'enquanto')))
2021-07-07 01:05:19:306 grammar LogManager.java:25 imported rule: (RULE EXECUTE (BLOCK (ALT 'execute')))
2021-07-07 01:05:19:306 grammar LogManager.java:25 imported rule: (RULE REPITA (BLOCK (ALT 'repita')))
2021-07-07 01:05:19:306 grammar LogManager.java:25 imported rule: (RULE ATRIBUICAO (BLOCK (ALT ':=')))
2021-07-07 01:05:19:306 grammar LogManager.java:25 imported rule: (RULE RETORNO (BLOCK (ALT 'retorno')))
2021-07-07 01:05:19:306 grammar LogManager.java:25 imported rule: (RULE LEIA (BLOCK (ALT 'leia')))
2021-07-07 01:05:19:306 grammar LogManager.java:25 imported rule: (RULE IMPRIMA (BLOCK (ALT 'imprima')))
2021-07-07 01:05:19:306 grammar LogManager.java:25 imported rule: (RULE E (BLOCK (ALT '&&')))
2021-07-07 01:05:19:306 grammar LogManager.java:25 imported rule: (RULE OU (BLOCK (ALT 'OR')))
2021-07-07 01:05:19:306 grammar LogManager.java:25 imported rule: (RULE NAO (BLOCK (ALT '!')))
2021-07-07 01:05:19:306 grammar LogManager.java:25 imported rule: (RULE IGUAL (BLOCK (ALT '==')))
2021-07-07 01:05:19:306 grammar LogManager.java:25 imported rule: (RULE DIFERENTE (BLOCK (ALT '!=')))
2021-07-07 01:05:19:306 grammar LogManager.java:25 imported rule: (RULE MAIOR (BLOCK (ALT '>')))
2021-07-07 01:05:19:306 grammar LogManager.java:25 imported rule: (RULE MENOR (BLOCK (ALT '<')))
2021-07-07 01:05:19:306 grammar LogManager.java:25 imported rule: (RULE MAIOR_IGUAL (BLOCK (ALT '>=')))
2021-07-07 01:05:19:306 grammar LogManager.java:25 imported rule: (RULE MENOR_IGUAL (BLOCK (ALT '<=')))
2021-07-07 01:05:19:306 grammar LogManager.java:25 imported rule: (RULE SOMA (BLOCK (ALT '+')))
2021-07-07 01:05:19:306 grammar LogManager.java:25 imported rule: (RULE SUBTRACAO (BLOCK (ALT '-')))
2021-07-07 01:05:19:306 grammar LogManager.java:25 imported rule: (RULE MULTIPLICACAO (BLOCK (ALT '*')))
2021-07-07 01:05:19:306 grammar LogManager.java:25 imported rule: (RULE DIVISAO (BLOCK (ALT '/')))
2021-07-07 01:05:19:306 grammar LogManager.java:25 imported rule: (RULE MODULO (BLOCK (ALT '%')))
2021-07-07 01:05:19:306 grammar LogManager.java:25 imported rule: (RULE INCREMENTO (BLOCK (ALT '++')))
2021-07-07 01:05:19:306 grammar LogManager.java:25 imported rule: (RULE DECREMENTO (BLOCK (ALT '--')))
2021-07-07 01:05:19:306 grammar LogManager.java:25 imported rule: (RULE FIM_LINHA (BLOCK (ALT ';')))
2021-07-07 01:05:19:306 grammar LogManager.java:25 imported rule: (RULE INICIO_PARENTESES (BLOCK (ALT '(')))
2021-07-07 01:05:19:306 grammar LogManager.java:25 imported rule: (RULE FIM_PARENTESES (BLOCK (ALT ')')))
2021-07-07 01:05:19:306 grammar LogManager.java:25 imported rule: (RULE INICIO_COLCHETE (BLOCK (ALT '[')))
2021-07-07 01:05:19:306 grammar LogManager.java:25 imported rule: (RULE FIM_COLCHETE (BLOCK (ALT ']')))
2021-07-07 01:05:19:306 grammar LogManager.java:25 imported rule: (RULE INICIO_CHAVES (BLOCK (ALT '{')))
2021-07-07 01:05:19:306 grammar LogManager.java:25 imported rule: (RULE FIM_CHAVES (BLOCK (ALT '}')))
2021-07-07 01:05:19:306 grammar LogManager.java:25 imported rule: (RULE SEPARADOR_PARAMETRO (BLOCK (ALT ',')))
2021-07-07 01:05:19:306 grammar LogManager.java:25 imported rule: (RULE SEPARADOR_DEFINICAO_VARIAVEL (BLOCK (ALT ':')))
2021-07-07 01:05:19:306 grammar LogManager.java:25 imported rule: (RULE VALOR (BLOCK (ALT EPSILON) (ALT DEFINICAO_INTEIRO) (ALT DEFINICAO_INTEIRO_POSITIVO) (ALT DEFINICAO_INTEIRO_NEGATIVO) (ALT DEFINICAO_RACIONAL) (ALT DEFINICAO_RACIONAL_POSITIVO) (ALT DEFINICAO_RACIONAL_NEGATIVO) (ALT DEFINICAO_CARACTERE) (ALT DEFINICAO_TEXTO) (ALT DEFINICAO_BOOLEANO)))
2021-07-07 01:05:19:306 grammar LogManager.java:25 imported rule: (RULE DEFINICAO_INTEIRO (BLOCK (ALT (+ (BLOCK (ALT ZERO)))) (ALT (? (BLOCK (ALT SINAL))) (+ (BLOCK (ALT NUMERO))))))
2021-07-07 01:05:19:306 grammar LogManager.java:25 imported rule: (RULE DEFINICAO_INTEIRO_POSITIVO (BLOCK (ALT (+ (BLOCK (ALT ZERO)))) (ALT (? (BLOCK (ALT POSITIVO))) (+ (BLOCK (ALT NUMERO))))))
2021-07-07 01:05:19:306 grammar LogManager.java:25 imported rule: (RULE DEFINICAO_INTEIRO_NEGATIVO (BLOCK (ALT (+ (BLOCK (ALT ZERO)))) (ALT NEGATIVO (* (BLOCK (ALT ZERO))) NAO_ZERO (* (BLOCK (ALT NUMERO))))))
2021-07-07 01:05:19:306 grammar LogManager.java:25 imported rule: (RULE DEFINICAO_RACIONAL (BLOCK (ALT (+ (BLOCK (ALT ZERO))) '.' (+ (BLOCK (ALT ZERO)))) (ALT (? (BLOCK (ALT SINAL))) (* (BLOCK (ALT ZERO))) NAO_ZERO (* (BLOCK (ALT NUMERO))) '.' (+ (BLOCK (ALT NUMERO)))) (ALT (? (BLOCK (ALT SINAL))) (+ (BLOCK (ALT ZERO))) '.' (* (BLOCK (ALT NAO_ZERO))) NUMERO (* (BLOCK (ALT NAO_ZERO))))))
2021-07-07 01:05:19:306 grammar LogManager.java:25 imported rule: (RULE DEFINICAO_RACIONAL_POSITIVO (BLOCK (ALT (+ (BLOCK (ALT ZERO))) '.' (+ (BLOCK (ALT ZERO)))) (ALT (? (BLOCK (ALT POSITIVO))) (* (BLOCK (ALT ZERO))) NAO_ZERO (* (BLOCK (ALT NUMERO))) '.' (+ (BLOCK (ALT NUMERO)))) (ALT (? (BLOCK (ALT POSITIVO))) (+ (BLOCK (ALT ZERO))) '.' (* (BLOCK (ALT NAO_ZERO))) NUMERO (* (BLOCK (ALT NAO_ZERO))))))
2021-07-07 01:05:19:306 grammar LogManager.java:25 imported rule: (RULE DEFINICAO_RACIONAL_NEGATIVO (BLOCK (ALT ZERO '.' (+ (BLOCK (ALT ZERO)))) (ALT NEGATIVO (* (BLOCK (ALT ZERO))) NAO_ZERO (* (BLOCK (ALT NUMERO))) '.' (+ (BLOCK (ALT NUMERO)))) (ALT NEGATIVO (+ (BLOCK (ALT ZERO))) '.' (* (BLOCK (ALT NAO_ZERO))) NUMERO (* (BLOCK (ALT NAO_ZERO))))))
2021-07-07 01:05:19:306 grammar LogManager.java:25 imported rule: (RULE DEFINICAO_CARACTERE (BLOCK (ALT '\'' CARACTER '\'')))
2021-07-07 01:05:19:306 grammar LogManager.java:25 imported rule: (RULE DEFINICAO_TEXTO (BLOCK (ALT '"' (* (BLOCK (ALT CARACTER))) '"')))
2021-07-07 01:05:19:306 grammar LogManager.java:25 imported rule: (RULE DEFINICAO_BOOLEANO (BLOCK (ALT VERDADEIRO) (ALT FALSO)))
2021-07-07 01:05:19:306 grammar LogManager.java:25 imported rule: (RULE SINAL (RULEMODIFIERS fragment) (BLOCK (ALT POSITIVO) (ALT NEGATIVO)))
2021-07-07 01:05:19:306 grammar LogManager.java:25 imported rule: (RULE POSITIVO (RULEMODIFIERS fragment) (BLOCK (ALT '+')))
2021-07-07 01:05:19:306 grammar LogManager.java:25 imported rule: (RULE NEGATIVO (RULEMODIFIERS fragment) (BLOCK (ALT '-')))
2021-07-07 01:05:19:306 grammar LogManager.java:25 imported rule: (RULE VERDADEIRO (RULEMODIFIERS fragment) (BLOCK (ALT 'verdadeiro')))
2021-07-07 01:05:19:306 grammar LogManager.java:25 imported rule: (RULE FALSO (RULEMODIFIERS fragment) (BLOCK (ALT 'falso')))
2021-07-07 01:05:19:306 grammar LogManager.java:25 imported rule: (RULE ZERO (RULEMODIFIERS fragment) (BLOCK (ALT '0')))
2021-07-07 01:05:19:306 grammar LogManager.java:25 imported rule: (RULE NAO_ZERO (RULEMODIFIERS fragment) (BLOCK (ALT [1-9])))
2021-07-07 01:05:19:306 grammar LogManager.java:25 imported rule: (RULE NUMERO (RULEMODIFIERS fragment) (BLOCK (ALT ZERO) (ALT NAO_ZERO)))
2021-07-07 01:05:19:306 grammar LogManager.java:25 imported rule: (RULE LETRA (RULEMODIFIERS fragment) (BLOCK (ALT [_a-zA-Z])))
2021-07-07 01:05:19:306 grammar LogManager.java:25 imported rule: (RULE CARACTER (RULEMODIFIERS fragment) (BLOCK (ALT (~ (SET ['\\\n\r]))) (ALT ESCAPE)))
2021-07-07 01:05:19:306 grammar LogManager.java:25 imported rule: (RULE ESCAPE (RULEMODIFIERS fragment) (BLOCK (ALT '\\' 'b') (ALT '\\' 't') (ALT '\\' 'n') (ALT '\\' 'f') (ALT '\\' 'r') (ALT '\\' '"') (ALT '\\' '\'') (ALT '\\' '\\')))
2021-07-07 01:05:19:306 grammar LogManager.java:25 imported rule: (RULE ID (BLOCK (ALT LETRA (* (BLOCK (ALT LETRA) (ALT NUMERO))))))
2021-07-07 01:05:19:306 grammar LogManager.java:25 imported rule: (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))
2021-07-07 01:05:19:307 grammar LogManager.java:25 Grammar: (COMBINED_GRAMMAR Cirno (import Tokens) (RULES (RULE inicio (BLOCK (ALT PROCEDIMENTO VAZIO PROCEDIMENTOPRINCIPAL INICIO_PARENTESES (* (BLOCK (ALT declaracao))) FIM_PARENTESES INICIO_CHAVES (? (BLOCK (ALT blocoDeComando))) FIM_CHAVES))) (RULE declaracao (BLOCK (ALT tipoPrimitivo SEPARADOR_DEFINICAO_VARIAVEL (= identifier ID) FIM_LINHA))) (RULE atribuicao (BLOCK (ALT (= identifier ID) ATRIBUICAO (BLOCK (ALT operacoes) (ALT (= identifier ID)) (ALT VALOR)) FIM_LINHA))) (RULE declaracaoComAtribuicao (BLOCK (ALT tipoPrimitivo SEPARADOR_DEFINICAO_VARIAVEL ID ATRIBUICAO (BLOCK (ALT operacoes) (ALT (= identifier ID)) (ALT VALOR)) FIM_LINHA))) (RULE declaracaoDeVariavel (BLOCK (ALT (BLOCK (ALT declaracao) (ALT declaracaoComAtribuicao) (ALT atribuicao))))) (RULE blocoDeComando (BLOCK (ALT (* (BLOCK (ALT declaracaoDeVariavel) (ALT operacoes FIM_LINHA) (ALT declaracoes) (ALT comando)))))) (RULE comando (BLOCK (ALT funcoes FIM_LINHA))) (RULE funcoes (BLOCK (ALT funcaoLer) (ALT funcaoEscrever))) (RULE funcaoLer (BLOCK (ALT LEIA INICIO_PARENTESES VALOR FIM_PARENTESES))) (RULE funcaoEscrever (BLOCK (ALT IMPRIMA INICIO_PARENTESES parametro FIM_PARENTESES))) (RULE parametro (BLOCK (ALT (* (BLOCK (ALT ID) (ALT VALOR) (ALT operacoes)))))) (RULE operacoes (BLOCK (ALT parametroOperacao operacaoAritmetica parametroOperacao))) (RULE parametroOperacao (BLOCK (ALT (BLOCK (ALT ID) (ALT VALOR))))) (RULE declaracoes (BLOCK (ALT declaracaoSe) (ALT declaracaoPara) (ALT declaracaoRepitaEnquanto) (ALT declaracaoEnquantoExecute) (ALT declaracaoQuandoFor))) (RULE condicional (BLOCK (ALT (? (BLOCK (ALT operadorLogicoUnitario))) (BLOCK (ALT ID) (ALT VALOR)) operacaoRelacao (? (BLOCK (ALT operadorLogicoUnitario))) (BLOCK (ALT ID) (ALT VALOR)) (? (BLOCK (ALT operadorLogicoBinario condicional)))))) (RULE declaracaoSe (BLOCK (ALT inicioSe (? (BLOCK (ALT seEntao)))))) (RULE inicioSe (BLOCK (ALT SE INICIO_PARENTESES condicional FIM_PARENTESES INICIO_CHAVES (? (BLOCK (ALT blocoDeComando))) FIM_CHAVES))) (RULE seEntao (BLOCK (ALT CONTUDO INICIO_CHAVES (? (BLOCK (ALT blocoDeComando))) FIM_CHAVES))) (RULE declaracaoPara (BLOCK (ALT PARA condicionalPara INICIO_CHAVES (? (BLOCK (ALT blocoDeComando))) FIM_CHAVES))) (RULE condicionalPara (BLOCK (ALT INICIO_PARENTESES condicionalInicioPara SEPARADOR_PARAMETRO condicional SEPARADOR_PARAMETRO condicionalIncrementoPara FIM_PARENTESES))) (RULE condicionalInicioPara (BLOCK (ALT tipoPrimitivo SEPARADOR_DEFINICAO_VARIAVEL atribuicaoFor) (ALT atribuicaoFor) (ALT ID))) (RULE condicionalIncrementoPara (BLOCK (ALT incrementoFor))) (RULE atribuicaoFor (BLOCK (ALT (? (BLOCK (ALT tipoPrimitivo SEPARADOR_DEFINICAO_VARIAVEL))) ID (? (BLOCK (ALT ATRIBUICAO (BLOCK (ALT (= identifier ID)) (ALT VALOR) (ALT operacoes)))))))) (RULE incrementoFor (BLOCK (ALT (= identifier ID) ATRIBUICAO operacoes))) (RULE declaracaoRepitaEnquanto (BLOCK (ALT REPITA INICIO_CHAVES (? (BLOCK (ALT blocoDeComando))) FIM_CHAVES ENQUANTO INICIO_PARENTESES condicional FIM_PARENTESES))) (RULE declaracaoEnquantoExecute (BLOCK (ALT ENQUANTO INICIO_PARENTESES condicional FIM_PARENTESES EXECUTE INICIO_CHAVES (? (BLOCK (ALT blocoDeComando))) FIM_CHAVES))) (RULE declaracaoQuandoFor (BLOCK (ALT inicioQuandoFor (+ (BLOCK (ALT forFor))) FINALIZE FIM_LINHA))) (RULE inicioQuandoFor (BLOCK (ALT QUANDO INICIO_PARENTESES ID FIM_PARENTESES SEPARADOR_DEFINICAO_VARIAVEL))) (RULE forFor (BLOCK (ALT FOR NICIO_PARENTESES ID FIM_PARENTESES INICIO_CHAVES (? (BLOCK (ALT blocoDeComando))) FIM_CHAVES))) (RULE tipoPrimitivo (BLOCK (ALT INTEIRO) (ALT INTEIRO_POSITIVO) (ALT INTEIRO_NEGATIVO) (ALT RACIONAL) (ALT RACIONAL_POSITIVO) (ALT RACIONAL_NEGATIVO) (ALT CARACTERE) (ALT TEXTO) (ALT BOOLEANO))) (RULE operacaoAritmetica (BLOCK (ALT operacaoMultiplicacao) (ALT operacaoAdicao))) (RULE operacaoAdicao (BLOCK (ALT SOMA) (ALT SUBTRACAO))) (RULE operacaoMultiplicacao (BLOCK (ALT MULTIPLICACAO) (ALT DIVISAO) (ALT MODULO))) (RULE operacaoRelacao (BLOCK (ALT operacaoIgualdade) (ALT operacaoComparacao))) (RULE operacaoIgualdade (BLOCK (ALT IGUAL) (ALT DIFERENTE) (ALT MAIOR_IGUAL) (ALT MENOR_IGUAL))) (RULE operacaoComparacao (BLOCK (ALT MAIOR) (ALT MENOR))) (RULE operadorLogicoBinario (BLOCK (ALT E) (ALT OU))) (RULE operadorLogicoUnitario (BLOCK (ALT NAO))) (RULE PROCEDIMENTO (BLOCK (ALT 'func'))) (RULE PROCEDIMENTOPRINCIPAL (BLOCK (ALT 'inicio'))) (RULE INTEIRO (BLOCK (ALT 'inteiro'))) (RULE INTEIRO_POSITIVO (BLOCK (ALT 'inteiro+'))) (RULE INTEIRO_NEGATIVO (BLOCK (ALT 'inteiro-'))) (RULE RACIONAL (BLOCK (ALT 'racional'))) (RULE RACIONAL_POSITIVO (BLOCK (ALT 'racional+'))) (RULE RACIONAL_NEGATIVO (BLOCK (ALT 'racional-'))) (RULE CARACTERE (BLOCK (ALT 'caractere'))) (RULE TEXTO (BLOCK (ALT 'texto'))) (RULE BOOLEANO (BLOCK (ALT 'booleano'))) (RULE VAZIO (BLOCK (ALT 'vazio'))) (RULE SE (BLOCK (ALT 'se'))) (RULE CONTUDO (BLOCK (ALT 'contudo'))) (RULE QUANDO (BLOCK (ALT 'quando'))) (RULE FINALIZE (BLOCK (ALT 'finalize'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE PARA (BLOCK (ALT 'para'))) (RULE ENQUANTO (BLOCK (ALT 'enquanto'))) (RULE EXECUTE (BLOCK (ALT 'execute'))) (RULE REPITA (BLOCK (ALT 'repita'))) (RULE ATRIBUICAO (BLOCK (ALT ':='))) (RULE RETORNO (BLOCK (ALT 'retorno'))) (RULE LEIA (BLOCK (ALT 'leia'))) (RULE IMPRIMA (BLOCK (ALT 'imprima'))) (RULE E (BLOCK (ALT '&&'))) (RULE OU (BLOCK (ALT 'OR'))) (RULE NAO (BLOCK (ALT '!'))) (RULE IGUAL (BLOCK (ALT '=='))) (RULE DIFERENTE (BLOCK (ALT '!='))) (RULE MAIOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MAIOR_IGUAL (BLOCK (ALT '>='))) (RULE MENOR_IGUAL (BLOCK (ALT '<='))) (RULE SOMA (BLOCK (ALT '+'))) (RULE SUBTRACAO (BLOCK (ALT '-'))) (RULE MULTIPLICACAO (BLOCK (ALT '*'))) (RULE DIVISAO (BLOCK (ALT '/'))) (RULE MODULO (BLOCK (ALT '%'))) (RULE INCREMENTO (BLOCK (ALT '++'))) (RULE DECREMENTO (BLOCK (ALT '--'))) (RULE FIM_LINHA (BLOCK (ALT ';'))) (RULE INICIO_PARENTESES (BLOCK (ALT '('))) (RULE FIM_PARENTESES (BLOCK (ALT ')'))) (RULE INICIO_COLCHETE (BLOCK (ALT '['))) (RULE FIM_COLCHETE (BLOCK (ALT ']'))) (RULE INICIO_CHAVES (BLOCK (ALT '{'))) (RULE FIM_CHAVES (BLOCK (ALT '}'))) (RULE SEPARADOR_PARAMETRO (BLOCK (ALT ','))) (RULE SEPARADOR_DEFINICAO_VARIAVEL (BLOCK (ALT ':'))) (RULE VALOR (BLOCK (ALT EPSILON) (ALT DEFINICAO_INTEIRO) (ALT DEFINICAO_INTEIRO_POSITIVO) (ALT DEFINICAO_INTEIRO_NEGATIVO) (ALT DEFINICAO_RACIONAL) (ALT DEFINICAO_RACIONAL_POSITIVO) (ALT DEFINICAO_RACIONAL_NEGATIVO) (ALT DEFINICAO_CARACTERE) (ALT DEFINICAO_TEXTO) (ALT DEFINICAO_BOOLEANO))) (RULE DEFINICAO_INTEIRO (BLOCK (ALT (+ (BLOCK (ALT ZERO)))) (ALT (? (BLOCK (ALT SINAL))) (+ (BLOCK (ALT NUMERO)))))) (RULE DEFINICAO_INTEIRO_POSITIVO (BLOCK (ALT (+ (BLOCK (ALT ZERO)))) (ALT (? (BLOCK (ALT POSITIVO))) (+ (BLOCK (ALT NUMERO)))))) (RULE DEFINICAO_INTEIRO_NEGATIVO (BLOCK (ALT (+ (BLOCK (ALT ZERO)))) (ALT NEGATIVO (* (BLOCK (ALT ZERO))) NAO_ZERO (* (BLOCK (ALT NUMERO)))))) (RULE DEFINICAO_RACIONAL (BLOCK (ALT (+ (BLOCK (ALT ZERO))) '.' (+ (BLOCK (ALT ZERO)))) (ALT (? (BLOCK (ALT SINAL))) (* (BLOCK (ALT ZERO))) NAO_ZERO (* (BLOCK (ALT NUMERO))) '.' (+ (BLOCK (ALT NUMERO)))) (ALT (? (BLOCK (ALT SINAL))) (+ (BLOCK (ALT ZERO))) '.' (* (BLOCK (ALT NAO_ZERO))) NUMERO (* (BLOCK (ALT NAO_ZERO)))))) (RULE DEFINICAO_RACIONAL_POSITIVO (BLOCK (ALT (+ (BLOCK (ALT ZERO))) '.' (+ (BLOCK (ALT ZERO)))) (ALT (? (BLOCK (ALT POSITIVO))) (* (BLOCK (ALT ZERO))) NAO_ZERO (* (BLOCK (ALT NUMERO))) '.' (+ (BLOCK (ALT NUMERO)))) (ALT (? (BLOCK (ALT POSITIVO))) (+ (BLOCK (ALT ZERO))) '.' (* (BLOCK (ALT NAO_ZERO))) NUMERO (* (BLOCK (ALT NAO_ZERO)))))) (RULE DEFINICAO_RACIONAL_NEGATIVO (BLOCK (ALT ZERO '.' (+ (BLOCK (ALT ZERO)))) (ALT NEGATIVO (* (BLOCK (ALT ZERO))) NAO_ZERO (* (BLOCK (ALT NUMERO))) '.' (+ (BLOCK (ALT NUMERO)))) (ALT NEGATIVO (+ (BLOCK (ALT ZERO))) '.' (* (BLOCK (ALT NAO_ZERO))) NUMERO (* (BLOCK (ALT NAO_ZERO)))))) (RULE DEFINICAO_CARACTERE (BLOCK (ALT '\'' CARACTER '\''))) (RULE DEFINICAO_TEXTO (BLOCK (ALT '"' (* (BLOCK (ALT CARACTER))) '"'))) (RULE DEFINICAO_BOOLEANO (BLOCK (ALT VERDADEIRO) (ALT FALSO))) (RULE SINAL (RULEMODIFIERS fragment) (BLOCK (ALT POSITIVO) (ALT NEGATIVO))) (RULE POSITIVO (RULEMODIFIERS fragment) (BLOCK (ALT '+'))) (RULE NEGATIVO (RULEMODIFIERS fragment) (BLOCK (ALT '-'))) (RULE VERDADEIRO (RULEMODIFIERS fragment) (BLOCK (ALT 'verdadeiro'))) (RULE FALSO (RULEMODIFIERS fragment) (BLOCK (ALT 'falso'))) (RULE ZERO (RULEMODIFIERS fragment) (BLOCK (ALT '0'))) (RULE NAO_ZERO (RULEMODIFIERS fragment) (BLOCK (ALT [1-9]))) (RULE NUMERO (RULEMODIFIERS fragment) (BLOCK (ALT ZERO) (ALT NAO_ZERO))) (RULE LETRA (RULEMODIFIERS fragment) (BLOCK (ALT [_a-zA-Z]))) (RULE CARACTER (RULEMODIFIERS fragment) (BLOCK (ALT (~ (SET ['\\\n\r]))) (ALT ESCAPE))) (RULE ESCAPE (RULEMODIFIERS fragment) (BLOCK (ALT '\\' 'b') (ALT '\\' 't') (ALT '\\' 'n') (ALT '\\' 'f') (ALT '\\' 'r') (ALT '\\' '"') (ALT '\\' '\'') (ALT '\\' '\\'))) (RULE ID (BLOCK (ALT LETRA (* (BLOCK (ALT LETRA) (ALT NUMERO)))))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2021-07-07 01:05:19:326 grammar LogManager.java:25 after: (COMBINED_GRAMMAR Cirno (import Tokens) (RULES (RULE inicio (BLOCK (ALT PROCEDIMENTO VAZIO PROCEDIMENTOPRINCIPAL INICIO_PARENTESES (* (BLOCK (ALT declaracao))) FIM_PARENTESES INICIO_CHAVES (? (BLOCK (ALT blocoDeComando))) FIM_CHAVES))) (RULE declaracao (BLOCK (ALT tipoPrimitivo SEPARADOR_DEFINICAO_VARIAVEL (= identifier ID) FIM_LINHA))) (RULE atribuicao (BLOCK (ALT (= identifier ID) ATRIBUICAO (BLOCK (ALT operacoes) (ALT (= identifier ID)) (ALT VALOR)) FIM_LINHA))) (RULE declaracaoComAtribuicao (BLOCK (ALT tipoPrimitivo SEPARADOR_DEFINICAO_VARIAVEL ID ATRIBUICAO (BLOCK (ALT operacoes) (ALT (= identifier ID)) (ALT VALOR)) FIM_LINHA))) (RULE declaracaoDeVariavel (BLOCK (ALT (BLOCK (ALT declaracao) (ALT declaracaoComAtribuicao) (ALT atribuicao))))) (RULE blocoDeComando (BLOCK (ALT (* (BLOCK (ALT declaracaoDeVariavel) (ALT operacoes FIM_LINHA) (ALT declaracoes) (ALT comando)))))) (RULE comando (BLOCK (ALT funcoes FIM_LINHA))) (RULE funcoes (BLOCK (ALT funcaoLer) (ALT funcaoEscrever))) (RULE funcaoLer (BLOCK (ALT LEIA INICIO_PARENTESES VALOR FIM_PARENTESES))) (RULE funcaoEscrever (BLOCK (ALT IMPRIMA INICIO_PARENTESES parametro FIM_PARENTESES))) (RULE parametro (BLOCK (ALT (* (BLOCK (ALT ID) (ALT VALOR) (ALT operacoes)))))) (RULE operacoes (BLOCK (ALT parametroOperacao operacaoAritmetica parametroOperacao))) (RULE parametroOperacao (BLOCK (ALT (SET ID VALOR)))) (RULE declaracoes (BLOCK (ALT declaracaoSe) (ALT declaracaoPara) (ALT declaracaoRepitaEnquanto) (ALT declaracaoEnquantoExecute) (ALT declaracaoQuandoFor))) (RULE condicional (BLOCK (ALT (? (BLOCK (ALT operadorLogicoUnitario))) (SET ID VALOR) operacaoRelacao (? (BLOCK (ALT operadorLogicoUnitario))) (SET ID VALOR) (? (BLOCK (ALT operadorLogicoBinario condicional)))))) (RULE declaracaoSe (BLOCK (ALT inicioSe (? (BLOCK (ALT seEntao)))))) (RULE inicioSe (BLOCK (ALT SE INICIO_PARENTESES condicional FIM_PARENTESES INICIO_CHAVES (? (BLOCK (ALT blocoDeComando))) FIM_CHAVES))) (RULE seEntao (BLOCK (ALT CONTUDO INICIO_CHAVES (? (BLOCK (ALT blocoDeComando))) FIM_CHAVES))) (RULE declaracaoPara (BLOCK (ALT PARA condicionalPara INICIO_CHAVES (? (BLOCK (ALT blocoDeComando))) FIM_CHAVES))) (RULE condicionalPara (BLOCK (ALT INICIO_PARENTESES condicionalInicioPara SEPARADOR_PARAMETRO condicional SEPARADOR_PARAMETRO condicionalIncrementoPara FIM_PARENTESES))) (RULE condicionalInicioPara (BLOCK (ALT tipoPrimitivo SEPARADOR_DEFINICAO_VARIAVEL atribuicaoFor) (ALT atribuicaoFor) (ALT ID))) (RULE condicionalIncrementoPara (BLOCK (ALT incrementoFor))) (RULE atribuicaoFor (BLOCK (ALT (? (BLOCK (ALT tipoPrimitivo SEPARADOR_DEFINICAO_VARIAVEL))) ID (? (BLOCK (ALT ATRIBUICAO (BLOCK (ALT (= identifier ID)) (ALT VALOR) (ALT operacoes)))))))) (RULE incrementoFor (BLOCK (ALT (= identifier ID) ATRIBUICAO operacoes))) (RULE declaracaoRepitaEnquanto (BLOCK (ALT REPITA INICIO_CHAVES (? (BLOCK (ALT blocoDeComando))) FIM_CHAVES ENQUANTO INICIO_PARENTESES condicional FIM_PARENTESES))) (RULE declaracaoEnquantoExecute (BLOCK (ALT ENQUANTO INICIO_PARENTESES condicional FIM_PARENTESES EXECUTE INICIO_CHAVES (? (BLOCK (ALT blocoDeComando))) FIM_CHAVES))) (RULE declaracaoQuandoFor (BLOCK (ALT inicioQuandoFor (+ (BLOCK (ALT forFor))) FINALIZE FIM_LINHA))) (RULE inicioQuandoFor (BLOCK (ALT QUANDO INICIO_PARENTESES ID FIM_PARENTESES SEPARADOR_DEFINICAO_VARIAVEL))) (RULE forFor (BLOCK (ALT FOR NICIO_PARENTESES ID FIM_PARENTESES INICIO_CHAVES (? (BLOCK (ALT blocoDeComando))) FIM_CHAVES))) (RULE tipoPrimitivo (BLOCK (ALT (SET INTEIRO INTEIRO_POSITIVO INTEIRO_NEGATIVO RACIONAL RACIONAL_POSITIVO RACIONAL_NEGATIVO CARACTERE TEXTO BOOLEANO)))) (RULE operacaoAritmetica (BLOCK (ALT operacaoMultiplicacao) (ALT operacaoAdicao))) (RULE operacaoAdicao (BLOCK (ALT (SET SOMA SUBTRACAO)))) (RULE operacaoMultiplicacao (BLOCK (ALT (SET MULTIPLICACAO DIVISAO MODULO)))) (RULE operacaoRelacao (BLOCK (ALT operacaoIgualdade) (ALT operacaoComparacao))) (RULE operacaoIgualdade (BLOCK (ALT (SET IGUAL DIFERENTE MAIOR_IGUAL MENOR_IGUAL)))) (RULE operacaoComparacao (BLOCK (ALT (SET MAIOR MENOR)))) (RULE operadorLogicoBinario (BLOCK (ALT (SET E OU)))) (RULE operadorLogicoUnitario (BLOCK (ALT NAO))) (RULE PROCEDIMENTO (BLOCK (ALT 'func'))) (RULE PROCEDIMENTOPRINCIPAL (BLOCK (ALT 'inicio'))) (RULE INTEIRO (BLOCK (ALT 'inteiro'))) (RULE INTEIRO_POSITIVO (BLOCK (ALT 'inteiro+'))) (RULE INTEIRO_NEGATIVO (BLOCK (ALT 'inteiro-'))) (RULE RACIONAL (BLOCK (ALT 'racional'))) (RULE RACIONAL_POSITIVO (BLOCK (ALT 'racional+'))) (RULE RACIONAL_NEGATIVO (BLOCK (ALT 'racional-'))) (RULE CARACTERE (BLOCK (ALT 'caractere'))) (RULE TEXTO (BLOCK (ALT 'texto'))) (RULE BOOLEANO (BLOCK (ALT 'booleano'))) (RULE VAZIO (BLOCK (ALT 'vazio'))) (RULE SE (BLOCK (ALT 'se'))) (RULE CONTUDO (BLOCK (ALT 'contudo'))) (RULE QUANDO (BLOCK (ALT 'quando'))) (RULE FINALIZE (BLOCK (ALT 'finalize'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE PARA (BLOCK (ALT 'para'))) (RULE ENQUANTO (BLOCK (ALT 'enquanto'))) (RULE EXECUTE (BLOCK (ALT 'execute'))) (RULE REPITA (BLOCK (ALT 'repita'))) (RULE ATRIBUICAO (BLOCK (ALT ':='))) (RULE RETORNO (BLOCK (ALT 'retorno'))) (RULE LEIA (BLOCK (ALT 'leia'))) (RULE IMPRIMA (BLOCK (ALT 'imprima'))) (RULE E (BLOCK (ALT '&&'))) (RULE OU (BLOCK (ALT 'OR'))) (RULE NAO (BLOCK (ALT '!'))) (RULE IGUAL (BLOCK (ALT '=='))) (RULE DIFERENTE (BLOCK (ALT '!='))) (RULE MAIOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MAIOR_IGUAL (BLOCK (ALT '>='))) (RULE MENOR_IGUAL (BLOCK (ALT '<='))) (RULE SOMA (BLOCK (ALT '+'))) (RULE SUBTRACAO (BLOCK (ALT '-'))) (RULE MULTIPLICACAO (BLOCK (ALT '*'))) (RULE DIVISAO (BLOCK (ALT '/'))) (RULE MODULO (BLOCK (ALT '%'))) (RULE INCREMENTO (BLOCK (ALT '++'))) (RULE DECREMENTO (BLOCK (ALT '--'))) (RULE FIM_LINHA (BLOCK (ALT ';'))) (RULE INICIO_PARENTESES (BLOCK (ALT '('))) (RULE FIM_PARENTESES (BLOCK (ALT ')'))) (RULE INICIO_COLCHETE (BLOCK (ALT '['))) (RULE FIM_COLCHETE (BLOCK (ALT ']'))) (RULE INICIO_CHAVES (BLOCK (ALT '{'))) (RULE FIM_CHAVES (BLOCK (ALT '}'))) (RULE SEPARADOR_PARAMETRO (BLOCK (ALT ','))) (RULE SEPARADOR_DEFINICAO_VARIAVEL (BLOCK (ALT ':'))) (RULE VALOR (BLOCK (ALT EPSILON) (ALT DEFINICAO_INTEIRO) (ALT DEFINICAO_INTEIRO_POSITIVO) (ALT DEFINICAO_INTEIRO_NEGATIVO) (ALT DEFINICAO_RACIONAL) (ALT DEFINICAO_RACIONAL_POSITIVO) (ALT DEFINICAO_RACIONAL_NEGATIVO) (ALT DEFINICAO_CARACTERE) (ALT DEFINICAO_TEXTO) (ALT DEFINICAO_BOOLEANO))) (RULE DEFINICAO_INTEIRO (BLOCK (ALT (+ (BLOCK (ALT ZERO)))) (ALT (? (BLOCK (ALT SINAL))) (+ (BLOCK (ALT NUMERO)))))) (RULE DEFINICAO_INTEIRO_POSITIVO (BLOCK (ALT (+ (BLOCK (ALT ZERO)))) (ALT (? (BLOCK (ALT POSITIVO))) (+ (BLOCK (ALT NUMERO)))))) (RULE DEFINICAO_INTEIRO_NEGATIVO (BLOCK (ALT (+ (BLOCK (ALT ZERO)))) (ALT NEGATIVO (* (BLOCK (ALT ZERO))) NAO_ZERO (* (BLOCK (ALT NUMERO)))))) (RULE DEFINICAO_RACIONAL (BLOCK (ALT (+ (BLOCK (ALT ZERO))) '.' (+ (BLOCK (ALT ZERO)))) (ALT (? (BLOCK (ALT SINAL))) (* (BLOCK (ALT ZERO))) NAO_ZERO (* (BLOCK (ALT NUMERO))) '.' (+ (BLOCK (ALT NUMERO)))) (ALT (? (BLOCK (ALT SINAL))) (+ (BLOCK (ALT ZERO))) '.' (* (BLOCK (ALT NAO_ZERO))) NUMERO (* (BLOCK (ALT NAO_ZERO)))))) (RULE DEFINICAO_RACIONAL_POSITIVO (BLOCK (ALT (+ (BLOCK (ALT ZERO))) '.' (+ (BLOCK (ALT ZERO)))) (ALT (? (BLOCK (ALT POSITIVO))) (* (BLOCK (ALT ZERO))) NAO_ZERO (* (BLOCK (ALT NUMERO))) '.' (+ (BLOCK (ALT NUMERO)))) (ALT (? (BLOCK (ALT POSITIVO))) (+ (BLOCK (ALT ZERO))) '.' (* (BLOCK (ALT NAO_ZERO))) NUMERO (* (BLOCK (ALT NAO_ZERO)))))) (RULE DEFINICAO_RACIONAL_NEGATIVO (BLOCK (ALT ZERO '.' (+ (BLOCK (ALT ZERO)))) (ALT NEGATIVO (* (BLOCK (ALT ZERO))) NAO_ZERO (* (BLOCK (ALT NUMERO))) '.' (+ (BLOCK (ALT NUMERO)))) (ALT NEGATIVO (+ (BLOCK (ALT ZERO))) '.' (* (BLOCK (ALT NAO_ZERO))) NUMERO (* (BLOCK (ALT NAO_ZERO)))))) (RULE DEFINICAO_CARACTERE (BLOCK (ALT '\'' CARACTER '\''))) (RULE DEFINICAO_TEXTO (BLOCK (ALT '"' (* (BLOCK (ALT CARACTER))) '"'))) (RULE DEFINICAO_BOOLEANO (BLOCK (ALT VERDADEIRO) (ALT FALSO))) (RULE SINAL (RULEMODIFIERS fragment) (BLOCK (ALT POSITIVO) (ALT NEGATIVO))) (RULE POSITIVO (RULEMODIFIERS fragment) (BLOCK (ALT '+'))) (RULE NEGATIVO (RULEMODIFIERS fragment) (BLOCK (ALT '-'))) (RULE VERDADEIRO (RULEMODIFIERS fragment) (BLOCK (ALT 'verdadeiro'))) (RULE FALSO (RULEMODIFIERS fragment) (BLOCK (ALT 'falso'))) (RULE ZERO (RULEMODIFIERS fragment) (BLOCK (ALT '0'))) (RULE NAO_ZERO (RULEMODIFIERS fragment) (BLOCK (ALT [1-9]))) (RULE NUMERO (RULEMODIFIERS fragment) (BLOCK (ALT ZERO) (ALT NAO_ZERO))) (RULE LETRA (RULEMODIFIERS fragment) (BLOCK (ALT [_a-zA-Z]))) (RULE CARACTER (RULEMODIFIERS fragment) (BLOCK (ALT (~ (SET ['\\\n\r]))) (ALT ESCAPE))) (RULE ESCAPE (RULEMODIFIERS fragment) (BLOCK (ALT '\\' 'b') (ALT '\\' 't') (ALT '\\' 'n') (ALT '\\' 'f') (ALT '\\' 'r') (ALT '\\' '"') (ALT '\\' '\'') (ALT '\\' '\\'))) (RULE ID (BLOCK (ALT LETRA (* (BLOCK (ALT LETRA) (ALT NUMERO)))))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2021-07-07 01:05:19:344 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR Cirno (import Tokens) (RULES (RULE inicio (BLOCK (ALT PROCEDIMENTO VAZIO PROCEDIMENTOPRINCIPAL INICIO_PARENTESES (* (BLOCK (ALT declaracao))) FIM_PARENTESES INICIO_CHAVES (? (BLOCK (ALT blocoDeComando))) FIM_CHAVES))) (RULE declaracao (BLOCK (ALT tipoPrimitivo SEPARADOR_DEFINICAO_VARIAVEL (= identifier ID) FIM_LINHA))) (RULE atribuicao (BLOCK (ALT (= identifier ID) ATRIBUICAO (BLOCK (ALT operacoes) (ALT (= identifier ID)) (ALT VALOR)) FIM_LINHA))) (RULE declaracaoComAtribuicao (BLOCK (ALT tipoPrimitivo SEPARADOR_DEFINICAO_VARIAVEL ID ATRIBUICAO (BLOCK (ALT operacoes) (ALT (= identifier ID)) (ALT VALOR)) FIM_LINHA))) (RULE declaracaoDeVariavel (BLOCK (ALT (BLOCK (ALT declaracao) (ALT declaracaoComAtribuicao) (ALT atribuicao))))) (RULE blocoDeComando (BLOCK (ALT (* (BLOCK (ALT declaracaoDeVariavel) (ALT operacoes FIM_LINHA) (ALT declaracoes) (ALT comando)))))) (RULE comando (BLOCK (ALT funcoes FIM_LINHA))) (RULE funcoes (BLOCK (ALT funcaoLer) (ALT funcaoEscrever))) (RULE funcaoLer (BLOCK (ALT LEIA INICIO_PARENTESES VALOR FIM_PARENTESES))) (RULE funcaoEscrever (BLOCK (ALT IMPRIMA INICIO_PARENTESES parametro FIM_PARENTESES))) (RULE parametro (BLOCK (ALT (* (BLOCK (ALT ID) (ALT VALOR) (ALT operacoes)))))) (RULE operacoes (BLOCK (ALT parametroOperacao operacaoAritmetica parametroOperacao))) (RULE parametroOperacao (BLOCK (ALT (SET ID VALOR)))) (RULE declaracoes (BLOCK (ALT declaracaoSe) (ALT declaracaoPara) (ALT declaracaoRepitaEnquanto) (ALT declaracaoEnquantoExecute) (ALT declaracaoQuandoFor))) (RULE condicional (BLOCK (ALT (? (BLOCK (ALT operadorLogicoUnitario))) (SET ID VALOR) operacaoRelacao (? (BLOCK (ALT operadorLogicoUnitario))) (SET ID VALOR) (? (BLOCK (ALT operadorLogicoBinario condicional)))))) (RULE declaracaoSe (BLOCK (ALT inicioSe (? (BLOCK (ALT seEntao)))))) (RULE inicioSe (BLOCK (ALT SE INICIO_PARENTESES condicional FIM_PARENTESES INICIO_CHAVES (? (BLOCK (ALT blocoDeComando))) FIM_CHAVES))) (RULE seEntao (BLOCK (ALT CONTUDO INICIO_CHAVES (? (BLOCK (ALT blocoDeComando))) FIM_CHAVES))) (RULE declaracaoPara (BLOCK (ALT PARA condicionalPara INICIO_CHAVES (? (BLOCK (ALT blocoDeComando))) FIM_CHAVES))) (RULE condicionalPara (BLOCK (ALT INICIO_PARENTESES condicionalInicioPara SEPARADOR_PARAMETRO condicional SEPARADOR_PARAMETRO condicionalIncrementoPara FIM_PARENTESES))) (RULE condicionalInicioPara (BLOCK (ALT tipoPrimitivo SEPARADOR_DEFINICAO_VARIAVEL atribuicaoFor) (ALT atribuicaoFor) (ALT ID))) (RULE condicionalIncrementoPara (BLOCK (ALT incrementoFor))) (RULE atribuicaoFor (BLOCK (ALT (? (BLOCK (ALT tipoPrimitivo SEPARADOR_DEFINICAO_VARIAVEL))) ID (? (BLOCK (ALT ATRIBUICAO (BLOCK (ALT (= identifier ID)) (ALT VALOR) (ALT operacoes)))))))) (RULE incrementoFor (BLOCK (ALT (= identifier ID) ATRIBUICAO operacoes))) (RULE declaracaoRepitaEnquanto (BLOCK (ALT REPITA INICIO_CHAVES (? (BLOCK (ALT blocoDeComando))) FIM_CHAVES ENQUANTO INICIO_PARENTESES condicional FIM_PARENTESES))) (RULE declaracaoEnquantoExecute (BLOCK (ALT ENQUANTO INICIO_PARENTESES condicional FIM_PARENTESES EXECUTE INICIO_CHAVES (? (BLOCK (ALT blocoDeComando))) FIM_CHAVES))) (RULE declaracaoQuandoFor (BLOCK (ALT inicioQuandoFor (+ (BLOCK (ALT forFor))) FINALIZE FIM_LINHA))) (RULE inicioQuandoFor (BLOCK (ALT QUANDO INICIO_PARENTESES ID FIM_PARENTESES SEPARADOR_DEFINICAO_VARIAVEL))) (RULE forFor (BLOCK (ALT FOR NICIO_PARENTESES ID FIM_PARENTESES INICIO_CHAVES (? (BLOCK (ALT blocoDeComando))) FIM_CHAVES))) (RULE tipoPrimitivo (BLOCK (ALT (SET INTEIRO INTEIRO_POSITIVO INTEIRO_NEGATIVO RACIONAL RACIONAL_POSITIVO RACIONAL_NEGATIVO CARACTERE TEXTO BOOLEANO)))) (RULE operacaoAritmetica (BLOCK (ALT operacaoMultiplicacao) (ALT operacaoAdicao))) (RULE operacaoAdicao (BLOCK (ALT (SET SOMA SUBTRACAO)))) (RULE operacaoMultiplicacao (BLOCK (ALT (SET MULTIPLICACAO DIVISAO MODULO)))) (RULE operacaoRelacao (BLOCK (ALT operacaoIgualdade) (ALT operacaoComparacao))) (RULE operacaoIgualdade (BLOCK (ALT (SET IGUAL DIFERENTE MAIOR_IGUAL MENOR_IGUAL)))) (RULE operacaoComparacao (BLOCK (ALT (SET MAIOR MENOR)))) (RULE operadorLogicoBinario (BLOCK (ALT (SET E OU)))) (RULE operadorLogicoUnitario (BLOCK (ALT NAO)))))
2021-07-07 01:05:19:344 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR CirnoLexer (RULES (RULE PROCEDIMENTO (BLOCK (ALT 'func'))) (RULE PROCEDIMENTOPRINCIPAL (BLOCK (ALT 'inicio'))) (RULE INTEIRO (BLOCK (ALT 'inteiro'))) (RULE INTEIRO_POSITIVO (BLOCK (ALT 'inteiro+'))) (RULE INTEIRO_NEGATIVO (BLOCK (ALT 'inteiro-'))) (RULE RACIONAL (BLOCK (ALT 'racional'))) (RULE RACIONAL_POSITIVO (BLOCK (ALT 'racional+'))) (RULE RACIONAL_NEGATIVO (BLOCK (ALT 'racional-'))) (RULE CARACTERE (BLOCK (ALT 'caractere'))) (RULE TEXTO (BLOCK (ALT 'texto'))) (RULE BOOLEANO (BLOCK (ALT 'booleano'))) (RULE VAZIO (BLOCK (ALT 'vazio'))) (RULE SE (BLOCK (ALT 'se'))) (RULE CONTUDO (BLOCK (ALT 'contudo'))) (RULE QUANDO (BLOCK (ALT 'quando'))) (RULE FINALIZE (BLOCK (ALT 'finalize'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE PARA (BLOCK (ALT 'para'))) (RULE ENQUANTO (BLOCK (ALT 'enquanto'))) (RULE EXECUTE (BLOCK (ALT 'execute'))) (RULE REPITA (BLOCK (ALT 'repita'))) (RULE ATRIBUICAO (BLOCK (ALT ':='))) (RULE RETORNO (BLOCK (ALT 'retorno'))) (RULE LEIA (BLOCK (ALT 'leia'))) (RULE IMPRIMA (BLOCK (ALT 'imprima'))) (RULE E (BLOCK (ALT '&&'))) (RULE OU (BLOCK (ALT 'OR'))) (RULE NAO (BLOCK (ALT '!'))) (RULE IGUAL (BLOCK (ALT '=='))) (RULE DIFERENTE (BLOCK (ALT '!='))) (RULE MAIOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MAIOR_IGUAL (BLOCK (ALT '>='))) (RULE MENOR_IGUAL (BLOCK (ALT '<='))) (RULE SOMA (BLOCK (ALT '+'))) (RULE SUBTRACAO (BLOCK (ALT '-'))) (RULE MULTIPLICACAO (BLOCK (ALT '*'))) (RULE DIVISAO (BLOCK (ALT '/'))) (RULE MODULO (BLOCK (ALT '%'))) (RULE INCREMENTO (BLOCK (ALT '++'))) (RULE DECREMENTO (BLOCK (ALT '--'))) (RULE FIM_LINHA (BLOCK (ALT ';'))) (RULE INICIO_PARENTESES (BLOCK (ALT '('))) (RULE FIM_PARENTESES (BLOCK (ALT ')'))) (RULE INICIO_COLCHETE (BLOCK (ALT '['))) (RULE FIM_COLCHETE (BLOCK (ALT ']'))) (RULE INICIO_CHAVES (BLOCK (ALT '{'))) (RULE FIM_CHAVES (BLOCK (ALT '}'))) (RULE SEPARADOR_PARAMETRO (BLOCK (ALT ','))) (RULE SEPARADOR_DEFINICAO_VARIAVEL (BLOCK (ALT ':'))) (RULE VALOR (BLOCK (ALT EPSILON) (ALT DEFINICAO_INTEIRO) (ALT DEFINICAO_INTEIRO_POSITIVO) (ALT DEFINICAO_INTEIRO_NEGATIVO) (ALT DEFINICAO_RACIONAL) (ALT DEFINICAO_RACIONAL_POSITIVO) (ALT DEFINICAO_RACIONAL_NEGATIVO) (ALT DEFINICAO_CARACTERE) (ALT DEFINICAO_TEXTO) (ALT DEFINICAO_BOOLEANO))) (RULE DEFINICAO_INTEIRO (BLOCK (ALT (+ (BLOCK (ALT ZERO)))) (ALT (? (BLOCK (ALT SINAL))) (+ (BLOCK (ALT NUMERO)))))) (RULE DEFINICAO_INTEIRO_POSITIVO (BLOCK (ALT (+ (BLOCK (ALT ZERO)))) (ALT (? (BLOCK (ALT POSITIVO))) (+ (BLOCK (ALT NUMERO)))))) (RULE DEFINICAO_INTEIRO_NEGATIVO (BLOCK (ALT (+ (BLOCK (ALT ZERO)))) (ALT NEGATIVO (* (BLOCK (ALT ZERO))) NAO_ZERO (* (BLOCK (ALT NUMERO)))))) (RULE DEFINICAO_RACIONAL (BLOCK (ALT (+ (BLOCK (ALT ZERO))) '.' (+ (BLOCK (ALT ZERO)))) (ALT (? (BLOCK (ALT SINAL))) (* (BLOCK (ALT ZERO))) NAO_ZERO (* (BLOCK (ALT NUMERO))) '.' (+ (BLOCK (ALT NUMERO)))) (ALT (? (BLOCK (ALT SINAL))) (+ (BLOCK (ALT ZERO))) '.' (* (BLOCK (ALT NAO_ZERO))) NUMERO (* (BLOCK (ALT NAO_ZERO)))))) (RULE DEFINICAO_RACIONAL_POSITIVO (BLOCK (ALT (+ (BLOCK (ALT ZERO))) '.' (+ (BLOCK (ALT ZERO)))) (ALT (? (BLOCK (ALT POSITIVO))) (* (BLOCK (ALT ZERO))) NAO_ZERO (* (BLOCK (ALT NUMERO))) '.' (+ (BLOCK (ALT NUMERO)))) (ALT (? (BLOCK (ALT POSITIVO))) (+ (BLOCK (ALT ZERO))) '.' (* (BLOCK (ALT NAO_ZERO))) NUMERO (* (BLOCK (ALT NAO_ZERO)))))) (RULE DEFINICAO_RACIONAL_NEGATIVO (BLOCK (ALT ZERO '.' (+ (BLOCK (ALT ZERO)))) (ALT NEGATIVO (* (BLOCK (ALT ZERO))) NAO_ZERO (* (BLOCK (ALT NUMERO))) '.' (+ (BLOCK (ALT NUMERO)))) (ALT NEGATIVO (+ (BLOCK (ALT ZERO))) '.' (* (BLOCK (ALT NAO_ZERO))) NUMERO (* (BLOCK (ALT NAO_ZERO)))))) (RULE DEFINICAO_CARACTERE (BLOCK (ALT '\'' CARACTER '\''))) (RULE DEFINICAO_TEXTO (BLOCK (ALT '"' (* (BLOCK (ALT CARACTER))) '"'))) (RULE DEFINICAO_BOOLEANO (BLOCK (ALT VERDADEIRO) (ALT FALSO))) (RULE SINAL (RULEMODIFIERS fragment) (BLOCK (ALT POSITIVO) (ALT NEGATIVO))) (RULE POSITIVO (RULEMODIFIERS fragment) (BLOCK (ALT '+'))) (RULE NEGATIVO (RULEMODIFIERS fragment) (BLOCK (ALT '-'))) (RULE VERDADEIRO (RULEMODIFIERS fragment) (BLOCK (ALT 'verdadeiro'))) (RULE FALSO (RULEMODIFIERS fragment) (BLOCK (ALT 'falso'))) (RULE ZERO (RULEMODIFIERS fragment) (BLOCK (ALT '0'))) (RULE NAO_ZERO (RULEMODIFIERS fragment) (BLOCK (ALT [1-9]))) (RULE NUMERO (RULEMODIFIERS fragment) (BLOCK (ALT ZERO) (ALT NAO_ZERO))) (RULE LETRA (RULEMODIFIERS fragment) (BLOCK (ALT [_a-zA-Z]))) (RULE CARACTER (RULEMODIFIERS fragment) (BLOCK (ALT (~ (SET ['\\\n\r]))) (ALT ESCAPE))) (RULE ESCAPE (RULEMODIFIERS fragment) (BLOCK (ALT '\\' 'b') (ALT '\\' 't') (ALT '\\' 'n') (ALT '\\' 'f') (ALT '\\' 'r') (ALT '\\' '"') (ALT '\\' '\'') (ALT '\\' '\\'))) (RULE ID (BLOCK (ALT LETRA (* (BLOCK (ALT LETRA) (ALT NUMERO)))))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2021-07-07 01:05:19:559 semantics LogManager.java:25 tokens={EOF=-1, PROCEDIMENTO=1, PROCEDIMENTOPRINCIPAL=2, INTEIRO=3, INTEIRO_POSITIVO=4, INTEIRO_NEGATIVO=5, RACIONAL=6, RACIONAL_POSITIVO=7, RACIONAL_NEGATIVO=8, CARACTERE=9, TEXTO=10, BOOLEANO=11, VAZIO=12, SE=13, CONTUDO=14, QUANDO=15, FINALIZE=16, FOR=17, PARA=18, ENQUANTO=19, EXECUTE=20, REPITA=21, ATRIBUICAO=22, RETORNO=23, LEIA=24, IMPRIMA=25, E=26, OU=27, NAO=28, IGUAL=29, DIFERENTE=30, MAIOR=31, MENOR=32, MAIOR_IGUAL=33, MENOR_IGUAL=34, SOMA=35, SUBTRACAO=36, MULTIPLICACAO=37, DIVISAO=38, MODULO=39, INCREMENTO=40, DECREMENTO=41, FIM_LINHA=42, INICIO_PARENTESES=43, FIM_PARENTESES=44, INICIO_COLCHETE=45, FIM_COLCHETE=46, INICIO_CHAVES=47, FIM_CHAVES=48, SEPARADOR_PARAMETRO=49, SEPARADOR_DEFINICAO_VARIAVEL=50, VALOR=51, DEFINICAO_INTEIRO=52, DEFINICAO_INTEIRO_POSITIVO=53, DEFINICAO_INTEIRO_NEGATIVO=54, DEFINICAO_RACIONAL=55, DEFINICAO_RACIONAL_POSITIVO=56, DEFINICAO_RACIONAL_NEGATIVO=57, DEFINICAO_CARACTERE=58, DEFINICAO_TEXTO=59, DEFINICAO_BOOLEANO=60, ID=61, WS=62, NICIO_PARENTESES=63}
2021-07-07 01:05:19:559 semantics LogManager.java:25 strings={'func'=1, 'inicio'=2, 'inteiro'=3, 'inteiro+'=4, 'inteiro-'=5, 'racional'=6, 'racional+'=7, 'racional-'=8, 'caractere'=9, 'texto'=10, 'booleano'=11, 'vazio'=12, 'se'=13, 'contudo'=14, 'quando'=15, 'finalize'=16, 'for'=17, 'para'=18, 'enquanto'=19, 'execute'=20, 'repita'=21, ':='=22, 'retorno'=23, 'leia'=24, 'imprima'=25, '&&'=26, 'OR'=27, '!'=28, '=='=29, '!='=30, '>'=31, '<'=32, '>='=33, '<='=34, '+'=35, '-'=36, '*'=37, '/'=38, '%'=39, '++'=40, '--'=41, ';'=42, '('=43, ')'=44, '['=45, ']'=46, '{'=47, '}'=48, ','=49, ':'=50}
2021-07-07 01:05:19:567 LL1 LogManager.java:25 
DECISION 0 in rule inicio
2021-07-07 01:05:19:567 LL1 LogManager.java:25 look=[{3..11}, 44]
2021-07-07 01:05:19:567 LL1 LogManager.java:25 LL(1)? true
2021-07-07 01:05:19:568 LL1 LogManager.java:25 
DECISION 1 in rule inicio
2021-07-07 01:05:19:568 LL1 LogManager.java:25 look=[{3..11, 13, 15, 18..19, 21, 24..25, 48, 51, 61}, 48]
2021-07-07 01:05:19:568 LL1 LogManager.java:25 LL(1)? false
2021-07-07 01:05:19:568 LL1 LogManager.java:25 
DECISION 2 in rule atribuicao
2021-07-07 01:05:19:568 LL1 LogManager.java:25 look=[{51, 61}, 61, 51]
2021-07-07 01:05:19:568 LL1 LogManager.java:25 LL(1)? false
2021-07-07 01:05:19:568 LL1 LogManager.java:25 
DECISION 3 in rule declaracaoComAtribuicao
2021-07-07 01:05:19:568 LL1 LogManager.java:25 look=[{51, 61}, 61, 51]
2021-07-07 01:05:19:568 LL1 LogManager.java:25 LL(1)? false
2021-07-07 01:05:19:568 LL1 LogManager.java:25 
DECISION 4 in rule declaracaoDeVariavel
2021-07-07 01:05:19:569 LL1 LogManager.java:25 look=[{3..11}, {3..11}, 61]
2021-07-07 01:05:19:569 LL1 LogManager.java:25 LL(1)? false
2021-07-07 01:05:19:569 LL1 LogManager.java:25 
DECISION 5 in rule blocoDeComando
2021-07-07 01:05:19:569 LL1 LogManager.java:25 look=[{3..11, 61}, {51, 61}, {13, 15, 18..19, 21}, {24..25}]
2021-07-07 01:05:19:569 LL1 LogManager.java:25 LL(1)? false
2021-07-07 01:05:19:569 LL1 LogManager.java:25 
DECISION 6 in rule blocoDeComando
2021-07-07 01:05:19:569 LL1 LogManager.java:25 look=[{3..11, 13, 15, 18..19, 21, 24..25, 51, 61}, 48]
2021-07-07 01:05:19:569 LL1 LogManager.java:25 LL(1)? true
2021-07-07 01:05:19:570 LL1 LogManager.java:25 
DECISION 7 in rule funcoes
2021-07-07 01:05:19:570 LL1 LogManager.java:25 look=[24, 25]
2021-07-07 01:05:19:570 LL1 LogManager.java:25 LL(1)? true
2021-07-07 01:05:19:570 LL1 LogManager.java:25 
DECISION 8 in rule parametro
2021-07-07 01:05:19:570 LL1 LogManager.java:25 look=[61, 51, {51, 61}]
2021-07-07 01:05:19:570 LL1 LogManager.java:25 LL(1)? false
2021-07-07 01:05:19:570 LL1 LogManager.java:25 
DECISION 9 in rule parametro
2021-07-07 01:05:19:570 LL1 LogManager.java:25 look=[{51, 61}, 44]
2021-07-07 01:05:19:570 LL1 LogManager.java:25 LL(1)? true
2021-07-07 01:05:19:570 LL1 LogManager.java:25 
DECISION 10 in rule declaracoes
2021-07-07 01:05:19:571 LL1 LogManager.java:25 look=[13, 18, 21, 19, 15]
2021-07-07 01:05:19:571 LL1 LogManager.java:25 LL(1)? true
2021-07-07 01:05:19:571 LL1 LogManager.java:25 
DECISION 11 in rule condicional
2021-07-07 01:05:19:571 LL1 LogManager.java:25 look=[28, {51, 61}]
2021-07-07 01:05:19:571 LL1 LogManager.java:25 LL(1)? true
2021-07-07 01:05:19:571 LL1 LogManager.java:25 
DECISION 12 in rule condicional
2021-07-07 01:05:19:571 LL1 LogManager.java:25 look=[28, {51, 61}]
2021-07-07 01:05:19:571 LL1 LogManager.java:25 LL(1)? true
2021-07-07 01:05:19:571 LL1 LogManager.java:25 
DECISION 13 in rule condicional
2021-07-07 01:05:19:571 LL1 LogManager.java:25 look=[{26..27}, {44, 49}]
2021-07-07 01:05:19:571 LL1 LogManager.java:25 LL(1)? true
2021-07-07 01:05:19:571 LL1 LogManager.java:25 
DECISION 14 in rule declaracaoSe
2021-07-07 01:05:19:571 LL1 LogManager.java:25 look=[14, {3..11, 13, 15, 18..19, 21, 24..25, 48, 51, 61}]
2021-07-07 01:05:19:572 LL1 LogManager.java:25 LL(1)? true
2021-07-07 01:05:19:572 LL1 LogManager.java:25 
DECISION 15 in rule inicioSe
2021-07-07 01:05:19:572 LL1 LogManager.java:25 look=[{3..11, 13, 15, 18..19, 21, 24..25, 48, 51, 61}, 48]
2021-07-07 01:05:19:572 LL1 LogManager.java:25 LL(1)? false
2021-07-07 01:05:19:572 LL1 LogManager.java:25 
DECISION 16 in rule seEntao
2021-07-07 01:05:19:572 LL1 LogManager.java:25 look=[{3..11, 13, 15, 18..19, 21, 24..25, 48, 51, 61}, 48]
2021-07-07 01:05:19:572 LL1 LogManager.java:25 LL(1)? false
2021-07-07 01:05:19:572 LL1 LogManager.java:25 
DECISION 17 in rule declaracaoPara
2021-07-07 01:05:19:572 LL1 LogManager.java:25 look=[{3..11, 13, 15, 18..19, 21, 24..25, 48, 51, 61}, 48]
2021-07-07 01:05:19:572 LL1 LogManager.java:25 LL(1)? false
2021-07-07 01:05:19:572 LL1 LogManager.java:25 
DECISION 18 in rule condicionalInicioPara
2021-07-07 01:05:19:572 LL1 LogManager.java:25 look=[{3..11}, {3..11, 61}, 61]
2021-07-07 01:05:19:574 LL1 LogManager.java:25 LL(1)? false
2021-07-07 01:05:19:574 LL1 LogManager.java:25 
DECISION 19 in rule atribuicaoFor
2021-07-07 01:05:19:574 LL1 LogManager.java:25 look=[{3..11}, 61]
2021-07-07 01:05:19:574 LL1 LogManager.java:25 LL(1)? true
2021-07-07 01:05:19:574 LL1 LogManager.java:25 
DECISION 20 in rule atribuicaoFor
2021-07-07 01:05:19:574 LL1 LogManager.java:25 look=[61, 51, {51, 61}]
2021-07-07 01:05:19:574 LL1 LogManager.java:25 LL(1)? false
2021-07-07 01:05:19:574 LL1 LogManager.java:25 
DECISION 21 in rule atribuicaoFor
2021-07-07 01:05:19:574 LL1 LogManager.java:25 look=[22, 49]
2021-07-07 01:05:19:574 LL1 LogManager.java:25 LL(1)? true
2021-07-07 01:05:19:574 LL1 LogManager.java:25 
DECISION 22 in rule declaracaoRepitaEnquanto
2021-07-07 01:05:19:574 LL1 LogManager.java:25 look=[{3..11, 13, 15, 18..19, 21, 24..25, 48, 51, 61}, 48]
2021-07-07 01:05:19:574 LL1 LogManager.java:25 LL(1)? false
2021-07-07 01:05:19:574 LL1 LogManager.java:25 
DECISION 23 in rule declaracaoEnquantoExecute
2021-07-07 01:05:19:574 LL1 LogManager.java:25 look=[{3..11, 13, 15, 18..19, 21, 24..25, 48, 51, 61}, 48]
2021-07-07 01:05:19:574 LL1 LogManager.java:25 LL(1)? false
2021-07-07 01:05:19:574 LL1 LogManager.java:25 
DECISION 24 in rule declaracaoQuandoFor
2021-07-07 01:05:19:574 LL1 LogManager.java:25 look=[17, 16]
2021-07-07 01:05:19:574 LL1 LogManager.java:25 LL(1)? true
2021-07-07 01:05:19:574 LL1 LogManager.java:25 
DECISION 25 in rule forFor
2021-07-07 01:05:19:574 LL1 LogManager.java:25 look=[{3..11, 13, 15, 18..19, 21, 24..25, 48, 51, 61}, 48]
2021-07-07 01:05:19:574 LL1 LogManager.java:25 LL(1)? false
2021-07-07 01:05:19:574 LL1 LogManager.java:25 
DECISION 26 in rule operacaoAritmetica
2021-07-07 01:05:19:574 LL1 LogManager.java:25 look=[{37..39}, {35..36}]
2021-07-07 01:05:19:574 LL1 LogManager.java:25 LL(1)? true
2021-07-07 01:05:19:574 LL1 LogManager.java:25 
DECISION 27 in rule operacaoRelacao
2021-07-07 01:05:19:574 LL1 LogManager.java:25 look=[{29..30, 33..34}, {31..32}]
2021-07-07 01:05:19:574 LL1 LogManager.java:25 LL(1)? true
