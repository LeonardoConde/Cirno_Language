2021-07-03 19:33:01:058 grammar LogManager.java:25 load Tokens from Cirno.g4
2021-07-03 19:33:01:064 grammar LogManager.java:25 before: (COMBINED_GRAMMAR Cirno (import Tokens) (RULES (RULE inicio (BLOCK (ALT PROCEDIMENTO VAZIO PROCEDIMENTOPRINCIPAL INICIO_PARENTESES (* (BLOCK (ALT declaracao))) FIM_PARENTESES INICIO_CHAVES blocoDeComando FIM_CHAVES))) (RULE declaracao (BLOCK (ALT tipoPrimitivo SEPARADOR_DEFINICAO_VARIAVEL ID FIM_LINHA))) (RULE atribuicao (BLOCK (ALT (= identifier ID) ATRIBUICAO (= identifier ID) FIM_LINHA))) (RULE declaracaoComAtribuicao (BLOCK (ALT tipoPrimitivo SEPARADOR_DEFINICAO_VARIAVEL ID ATRIBUICAO (= identifier ID) FIM_LINHA))) (RULE declaracaoDeVariavel (BLOCK (ALT (* (BLOCK (ALT declaracao) (ALT declaracaoComAtribuicao) (ALT atribuicao)))))) (RULE blocoDeComando (BLOCK (ALT declaracaoDeVariavel) (ALT 'comando') (ALT operacoes))) (RULE comando (BLOCK (ALT funcoes FIM_LINHA))) (RULE funcoes (BLOCK (ALT funcaoLer) (ALT funcaoEscrever))) (RULE funcaoLer (BLOCK (ALT LEIA INICIO_PARENTESES tipoPrimitivo FIM_PARENTESES))) (RULE funcaoEscrever (BLOCK (ALT IMPRIMA INICIO_PARENTESES (* (BLOCK (ALT tipoPrimitivo))) FIM_PARENTESES))) (RULE operacoes (BLOCK (ALT operacaoMatematicaInteiros))) (RULE operacaoMatematicaInteiros (BLOCK (ALT operacaoMatematicaInteiros operacaoAritmetica INTEIRO) (ALT INTEIRO operacaoAritmetica INTEIRO))) (RULE declaracoes (BLOCK (ALT declaracaoSe))) (RULE demostracaoCondicional (BLOCK (ALT INICIO_PARENTESES operacacaoLogica FIM_PARENTESES))) (RULE declaracaoSe (BLOCK (ALT inicioSe seEntao seContudoSe))) (RULE inicioSe (BLOCK (ALT SE demostracaoCondicional))) (RULE seEntao (BLOCK (ALT CONTUDO blocoDeComando))) (RULE seContudo (BLOCK (ALT CONTUDO blocoDeComando FIM_LINHA))) (RULE seContudoSe (BLOCK (ALT contudoSe) (ALT seContudo) (ALT FIM_LINHA))) (RULE contudoSe (BLOCK (ALT CONTUDO declaracaoSe))) (RULE operadorLogicoBinario (BLOCK (ALT E) (ALT OU))) (RULE operadorLogicoUnitario (BLOCK (ALT NAO))) (RULE tipoPrimitivo (BLOCK (ALT INTEIRO) (ALT INTEIRO_POSITIVO) (ALT INTEIRO_NEGATIVO) (ALT RACIONAL) (ALT RACIONAL_POSITIVO) (ALT RACIONAL_NEGATIVO) (ALT CARACTERE) (ALT TEXTO) (ALT BOOLEANO))) (RULE operacaoAritmetica (BLOCK (ALT operacaoAdicao) (ALT operacaoMultiplicacao))) (RULE operacaoAdicao (BLOCK (ALT SOMA) (ALT SUBTRACAO))) (RULE operacaoMultiplicacao (BLOCK (ALT MULTIPLICACAO) (ALT DIVISAO) (ALT MODULO))) (RULE operacaoRelacao (BLOCK (ALT operacaoIgualdade) (ALT operacaoComparacao))) (RULE operacaoIgualdade (BLOCK (ALT IGUAL) (ALT DIFERENTE) (ALT MAIOR_IGUAL) (ALT MENOR_IGUAL))) (RULE operacaoComparacao (BLOCK (ALT MAIOR) (ALT MENOR)))))
2021-07-03 19:33:01:066 grammar LogManager.java:25 imported actions: []
2021-07-03 19:33:01:067 grammar LogManager.java:25 imported rule: (RULE PROCEDIMENTO (BLOCK (ALT 'func')))
2021-07-03 19:33:01:067 grammar LogManager.java:25 imported rule: (RULE PROCEDIMENTOPRINCIPAL (BLOCK (ALT 'inicio')))
2021-07-03 19:33:01:067 grammar LogManager.java:25 imported rule: (RULE INTEIRO (BLOCK (ALT 'inteiro')))
2021-07-03 19:33:01:067 grammar LogManager.java:25 imported rule: (RULE INTEIRO_POSITIVO (BLOCK (ALT 'inteiro+')))
2021-07-03 19:33:01:067 grammar LogManager.java:25 imported rule: (RULE INTEIRO_NEGATIVO (BLOCK (ALT 'inteiro-')))
2021-07-03 19:33:01:067 grammar LogManager.java:25 imported rule: (RULE RACIONAL (BLOCK (ALT 'racional')))
2021-07-03 19:33:01:067 grammar LogManager.java:25 imported rule: (RULE RACIONAL_POSITIVO (BLOCK (ALT 'racional+')))
2021-07-03 19:33:01:067 grammar LogManager.java:25 imported rule: (RULE RACIONAL_NEGATIVO (BLOCK (ALT 'racional-')))
2021-07-03 19:33:01:067 grammar LogManager.java:25 imported rule: (RULE CARACTERE (BLOCK (ALT 'caractere')))
2021-07-03 19:33:01:067 grammar LogManager.java:25 imported rule: (RULE TEXTO (BLOCK (ALT 'texto')))
2021-07-03 19:33:01:067 grammar LogManager.java:25 imported rule: (RULE BOOLEANO (BLOCK (ALT 'booleano')))
2021-07-03 19:33:01:067 grammar LogManager.java:25 imported rule: (RULE VAZIO (BLOCK (ALT 'vazio')))
2021-07-03 19:33:01:067 grammar LogManager.java:25 imported rule: (RULE SE (BLOCK (ALT 'se')))
2021-07-03 19:33:01:067 grammar LogManager.java:25 imported rule: (RULE CONTUDO (BLOCK (ALT 'contudo')))
2021-07-03 19:33:01:067 grammar LogManager.java:25 imported rule: (RULE QUANDO (BLOCK (ALT 'quando')))
2021-07-03 19:33:01:067 grammar LogManager.java:25 imported rule: (RULE FINALIZE (BLOCK (ALT 'finalize')))
2021-07-03 19:33:01:067 grammar LogManager.java:25 imported rule: (RULE PARA (BLOCK (ALT 'para')))
2021-07-03 19:33:01:067 grammar LogManager.java:25 imported rule: (RULE ENQUANTO (BLOCK (ALT 'enquanto')))
2021-07-03 19:33:01:067 grammar LogManager.java:25 imported rule: (RULE EXECUTE (BLOCK (ALT 'execute')))
2021-07-03 19:33:01:067 grammar LogManager.java:25 imported rule: (RULE REPITA (BLOCK (ALT 'repita')))
2021-07-03 19:33:01:067 grammar LogManager.java:25 imported rule: (RULE ATRIBUICAO (BLOCK (ALT ':=')))
2021-07-03 19:33:01:067 grammar LogManager.java:25 imported rule: (RULE RETORNO (BLOCK (ALT 'retorno')))
2021-07-03 19:33:01:067 grammar LogManager.java:25 imported rule: (RULE LEIA (BLOCK (ALT 'leia')))
2021-07-03 19:33:01:067 grammar LogManager.java:25 imported rule: (RULE IMPRIMA (BLOCK (ALT 'imprima')))
2021-07-03 19:33:01:067 grammar LogManager.java:25 imported rule: (RULE E (BLOCK (ALT '&&')))
2021-07-03 19:33:01:067 grammar LogManager.java:25 imported rule: (RULE OU (BLOCK (ALT 'OR')))
2021-07-03 19:33:01:067 grammar LogManager.java:25 imported rule: (RULE NAO (BLOCK (ALT '!')))
2021-07-03 19:33:01:067 grammar LogManager.java:25 imported rule: (RULE IGUAL (BLOCK (ALT '==')))
2021-07-03 19:33:01:067 grammar LogManager.java:25 imported rule: (RULE DIFERENTE (BLOCK (ALT '!=')))
2021-07-03 19:33:01:067 grammar LogManager.java:25 imported rule: (RULE MAIOR (BLOCK (ALT '>')))
2021-07-03 19:33:01:067 grammar LogManager.java:25 imported rule: (RULE MENOR (BLOCK (ALT '<')))
2021-07-03 19:33:01:067 grammar LogManager.java:25 imported rule: (RULE MAIOR_IGUAL (BLOCK (ALT '>=')))
2021-07-03 19:33:01:067 grammar LogManager.java:25 imported rule: (RULE MENOR_IGUAL (BLOCK (ALT '<=')))
2021-07-03 19:33:01:067 grammar LogManager.java:25 imported rule: (RULE SOMA (BLOCK (ALT '+')))
2021-07-03 19:33:01:067 grammar LogManager.java:25 imported rule: (RULE SUBTRACAO (BLOCK (ALT '-')))
2021-07-03 19:33:01:067 grammar LogManager.java:25 imported rule: (RULE MULTIPLICACAO (BLOCK (ALT '*')))
2021-07-03 19:33:01:067 grammar LogManager.java:25 imported rule: (RULE DIVISAO (BLOCK (ALT '/')))
2021-07-03 19:33:01:067 grammar LogManager.java:25 imported rule: (RULE MODULO (BLOCK (ALT '%')))
2021-07-03 19:33:01:067 grammar LogManager.java:25 imported rule: (RULE INCREMENTO (BLOCK (ALT '++')))
2021-07-03 19:33:01:067 grammar LogManager.java:25 imported rule: (RULE DECREMENTO (BLOCK (ALT '--')))
2021-07-03 19:33:01:067 grammar LogManager.java:25 imported rule: (RULE FIM_LINHA (BLOCK (ALT ';')))
2021-07-03 19:33:01:067 grammar LogManager.java:25 imported rule: (RULE INICIO_PARENTESES (BLOCK (ALT '(')))
2021-07-03 19:33:01:067 grammar LogManager.java:25 imported rule: (RULE FIM_PARENTESES (BLOCK (ALT ')')))
2021-07-03 19:33:01:067 grammar LogManager.java:25 imported rule: (RULE INICIO_COLCHETE (BLOCK (ALT '[')))
2021-07-03 19:33:01:067 grammar LogManager.java:25 imported rule: (RULE FIM_COLCHETE (BLOCK (ALT ']')))
2021-07-03 19:33:01:067 grammar LogManager.java:25 imported rule: (RULE INICIO_CHAVES (BLOCK (ALT '{')))
2021-07-03 19:33:01:067 grammar LogManager.java:25 imported rule: (RULE FIM_CHAVES (BLOCK (ALT '}')))
2021-07-03 19:33:01:067 grammar LogManager.java:25 imported rule: (RULE SEPARADOR_PARAMETRO (BLOCK (ALT ',')))
2021-07-03 19:33:01:067 grammar LogManager.java:25 imported rule: (RULE SEPARADOR_DEFINICAO_VARIAVEL (BLOCK (ALT ':')))
2021-07-03 19:33:01:067 grammar LogManager.java:25 imported rule: (RULE DEFINICAO_INTEIRO (BLOCK (ALT (+ (BLOCK (ALT ZERO)))) (ALT (? (BLOCK (ALT SINAL))) (* (BLOCK (ALT ZERO))) NAO_ZERO (* (BLOCK (ALT NUMERO))))))
2021-07-03 19:33:01:067 grammar LogManager.java:25 imported rule: (RULE DEFINICAO_INTEIRO_POSITIVO (BLOCK (ALT (+ (BLOCK (ALT ZERO)))) (ALT (? (BLOCK (ALT POSITIVO))) (* (BLOCK (ALT ZERO))) NAO_ZERO (* (BLOCK (ALT NUMERO))))))
2021-07-03 19:33:01:067 grammar LogManager.java:25 imported rule: (RULE DEFINICAO_INTEIRO_NEGATIVO (BLOCK (ALT (+ (BLOCK (ALT ZERO)))) (ALT (? (BLOCK (ALT NEGATIVO))) (* (BLOCK (ALT ZERO))) NAO_ZERO (* (BLOCK (ALT NUMERO))))))
2021-07-03 19:33:01:067 grammar LogManager.java:25 imported rule: (RULE DEFINICAO_RACIONAL (BLOCK (ALT (+ (BLOCK (ALT ZERO))) '.' (+ (BLOCK (ALT ZERO)))) (ALT (? (BLOCK (ALT SINAL))) (* (BLOCK (ALT ZERO))) NAO_ZERO (* (BLOCK (ALT NUMERO))) '.' (+ (BLOCK (ALT NUMERO)))) (ALT (? (BLOCK (ALT SINAL))) (+ (BLOCK (ALT ZERO))) '.' (* (BLOCK (ALT NAO_ZERO))) NUMERO (* (BLOCK (ALT NAO_ZERO))))))
2021-07-03 19:33:01:067 grammar LogManager.java:25 imported rule: (RULE DEFINICAO_RACIONAL_POSITIVO (BLOCK (ALT (+ (BLOCK (ALT ZERO))) '.' (+ (BLOCK (ALT ZERO)))) (ALT (? (BLOCK (ALT POSITIVO))) (* (BLOCK (ALT ZERO))) NAO_ZERO (* (BLOCK (ALT NUMERO))) '.' (+ (BLOCK (ALT NUMERO)))) (ALT (? (BLOCK (ALT POSITIVO))) (+ (BLOCK (ALT ZERO))) '.' (* (BLOCK (ALT NAO_ZERO))) NUMERO (* (BLOCK (ALT NAO_ZERO))))))
2021-07-03 19:33:01:067 grammar LogManager.java:25 imported rule: (RULE DEFINICAO_RACIONAL_NEGATIVO (BLOCK (ALT ZERO '.' (+ (BLOCK (ALT ZERO)))) (ALT (? (BLOCK (ALT NEGATIVO))) (* (BLOCK (ALT ZERO))) NAO_ZERO (* (BLOCK (ALT NUMERO))) '.' (+ (BLOCK (ALT NUMERO)))) (ALT (? (BLOCK (ALT NEGATIVO))) (+ (BLOCK (ALT ZERO))) '.' (* (BLOCK (ALT NAO_ZERO))) NUMERO (* (BLOCK (ALT NAO_ZERO))))))
2021-07-03 19:33:01:067 grammar LogManager.java:25 imported rule: (RULE DEFINICAO_CARACTERE (BLOCK (ALT '\'' CARACTER '\'')))
2021-07-03 19:33:01:067 grammar LogManager.java:25 imported rule: (RULE DEFINICAO_TEXTO (BLOCK (ALT '"' (* (BLOCK (ALT CARACTER))) '"')))
2021-07-03 19:33:01:067 grammar LogManager.java:25 imported rule: (RULE DEFINICAO_BOOLEANO (BLOCK (ALT VERDADEIRO) (ALT FALSO)))
2021-07-03 19:33:01:067 grammar LogManager.java:25 imported rule: (RULE SINAL (RULEMODIFIERS fragment) (BLOCK (ALT POSITIVO) (ALT NEGATIVO)))
2021-07-03 19:33:01:067 grammar LogManager.java:25 imported rule: (RULE POSITIVO (RULEMODIFIERS fragment) (BLOCK (ALT '+')))
2021-07-03 19:33:01:067 grammar LogManager.java:25 imported rule: (RULE NEGATIVO (RULEMODIFIERS fragment) (BLOCK (ALT '-')))
2021-07-03 19:33:01:067 grammar LogManager.java:25 imported rule: (RULE VERDADEIRO (RULEMODIFIERS fragment) (BLOCK (ALT 'verdadeiro')))
2021-07-03 19:33:01:067 grammar LogManager.java:25 imported rule: (RULE FALSO (RULEMODIFIERS fragment) (BLOCK (ALT 'falso')))
2021-07-03 19:33:01:067 grammar LogManager.java:25 imported rule: (RULE ZERO (RULEMODIFIERS fragment) (BLOCK (ALT '0')))
2021-07-03 19:33:01:067 grammar LogManager.java:25 imported rule: (RULE NAO_ZERO (RULEMODIFIERS fragment) (BLOCK (ALT [1-9])))
2021-07-03 19:33:01:067 grammar LogManager.java:25 imported rule: (RULE NUMERO (RULEMODIFIERS fragment) (BLOCK (ALT ZERO) (ALT NAO_ZERO)))
2021-07-03 19:33:01:067 grammar LogManager.java:25 imported rule: (RULE LETRA (RULEMODIFIERS fragment) (BLOCK (ALT [_a-zA-Z])))
2021-07-03 19:33:01:067 grammar LogManager.java:25 imported rule: (RULE CARACTER (RULEMODIFIERS fragment) (BLOCK (ALT (~ (SET ['\\\n\r]))) (ALT ESCAPE)))
2021-07-03 19:33:01:067 grammar LogManager.java:25 imported rule: (RULE ESCAPE (RULEMODIFIERS fragment) (BLOCK (ALT '\\' 'b') (ALT '\\' 't') (ALT '\\' 'n') (ALT '\\' 'f') (ALT '\\' 'r') (ALT '\\' '"') (ALT '\\' '\'') (ALT '\\' '\\')))
2021-07-03 19:33:01:067 grammar LogManager.java:25 imported rule: (RULE ID (BLOCK (ALT LETRA (* (BLOCK (ALT LETRA) (ALT NUMERO))))))
2021-07-03 19:33:01:067 grammar LogManager.java:25 imported rule: (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))
2021-07-03 19:33:01:068 grammar LogManager.java:25 Grammar: (COMBINED_GRAMMAR Cirno (import Tokens) (RULES (RULE inicio (BLOCK (ALT PROCEDIMENTO VAZIO PROCEDIMENTOPRINCIPAL INICIO_PARENTESES (* (BLOCK (ALT declaracao))) FIM_PARENTESES INICIO_CHAVES blocoDeComando FIM_CHAVES))) (RULE declaracao (BLOCK (ALT tipoPrimitivo SEPARADOR_DEFINICAO_VARIAVEL ID FIM_LINHA))) (RULE atribuicao (BLOCK (ALT (= identifier ID) ATRIBUICAO (= identifier ID) FIM_LINHA))) (RULE declaracaoComAtribuicao (BLOCK (ALT tipoPrimitivo SEPARADOR_DEFINICAO_VARIAVEL ID ATRIBUICAO (= identifier ID) FIM_LINHA))) (RULE declaracaoDeVariavel (BLOCK (ALT (* (BLOCK (ALT declaracao) (ALT declaracaoComAtribuicao) (ALT atribuicao)))))) (RULE blocoDeComando (BLOCK (ALT declaracaoDeVariavel) (ALT 'comando') (ALT operacoes))) (RULE comando (BLOCK (ALT funcoes FIM_LINHA))) (RULE funcoes (BLOCK (ALT funcaoLer) (ALT funcaoEscrever))) (RULE funcaoLer (BLOCK (ALT LEIA INICIO_PARENTESES tipoPrimitivo FIM_PARENTESES))) (RULE funcaoEscrever (BLOCK (ALT IMPRIMA INICIO_PARENTESES (* (BLOCK (ALT tipoPrimitivo))) FIM_PARENTESES))) (RULE operacoes (BLOCK (ALT operacaoMatematicaInteiros))) (RULE operacaoMatematicaInteiros (BLOCK (ALT operacaoMatematicaInteiros operacaoAritmetica INTEIRO) (ALT INTEIRO operacaoAritmetica INTEIRO))) (RULE declaracoes (BLOCK (ALT declaracaoSe))) (RULE demostracaoCondicional (BLOCK (ALT INICIO_PARENTESES operacacaoLogica FIM_PARENTESES))) (RULE declaracaoSe (BLOCK (ALT inicioSe seEntao seContudoSe))) (RULE inicioSe (BLOCK (ALT SE demostracaoCondicional))) (RULE seEntao (BLOCK (ALT CONTUDO blocoDeComando))) (RULE seContudo (BLOCK (ALT CONTUDO blocoDeComando FIM_LINHA))) (RULE seContudoSe (BLOCK (ALT contudoSe) (ALT seContudo) (ALT FIM_LINHA))) (RULE contudoSe (BLOCK (ALT CONTUDO declaracaoSe))) (RULE operadorLogicoBinario (BLOCK (ALT E) (ALT OU))) (RULE operadorLogicoUnitario (BLOCK (ALT NAO))) (RULE tipoPrimitivo (BLOCK (ALT INTEIRO) (ALT INTEIRO_POSITIVO) (ALT INTEIRO_NEGATIVO) (ALT RACIONAL) (ALT RACIONAL_POSITIVO) (ALT RACIONAL_NEGATIVO) (ALT CARACTERE) (ALT TEXTO) (ALT BOOLEANO))) (RULE operacaoAritmetica (BLOCK (ALT operacaoAdicao) (ALT operacaoMultiplicacao))) (RULE operacaoAdicao (BLOCK (ALT SOMA) (ALT SUBTRACAO))) (RULE operacaoMultiplicacao (BLOCK (ALT MULTIPLICACAO) (ALT DIVISAO) (ALT MODULO))) (RULE operacaoRelacao (BLOCK (ALT operacaoIgualdade) (ALT operacaoComparacao))) (RULE operacaoIgualdade (BLOCK (ALT IGUAL) (ALT DIFERENTE) (ALT MAIOR_IGUAL) (ALT MENOR_IGUAL))) (RULE operacaoComparacao (BLOCK (ALT MAIOR) (ALT MENOR))) (RULE PROCEDIMENTO (BLOCK (ALT 'func'))) (RULE PROCEDIMENTOPRINCIPAL (BLOCK (ALT 'inicio'))) (RULE INTEIRO (BLOCK (ALT 'inteiro'))) (RULE INTEIRO_POSITIVO (BLOCK (ALT 'inteiro+'))) (RULE INTEIRO_NEGATIVO (BLOCK (ALT 'inteiro-'))) (RULE RACIONAL (BLOCK (ALT 'racional'))) (RULE RACIONAL_POSITIVO (BLOCK (ALT 'racional+'))) (RULE RACIONAL_NEGATIVO (BLOCK (ALT 'racional-'))) (RULE CARACTERE (BLOCK (ALT 'caractere'))) (RULE TEXTO (BLOCK (ALT 'texto'))) (RULE BOOLEANO (BLOCK (ALT 'booleano'))) (RULE VAZIO (BLOCK (ALT 'vazio'))) (RULE SE (BLOCK (ALT 'se'))) (RULE CONTUDO (BLOCK (ALT 'contudo'))) (RULE QUANDO (BLOCK (ALT 'quando'))) (RULE FINALIZE (BLOCK (ALT 'finalize'))) (RULE PARA (BLOCK (ALT 'para'))) (RULE ENQUANTO (BLOCK (ALT 'enquanto'))) (RULE EXECUTE (BLOCK (ALT 'execute'))) (RULE REPITA (BLOCK (ALT 'repita'))) (RULE ATRIBUICAO (BLOCK (ALT ':='))) (RULE RETORNO (BLOCK (ALT 'retorno'))) (RULE LEIA (BLOCK (ALT 'leia'))) (RULE IMPRIMA (BLOCK (ALT 'imprima'))) (RULE E (BLOCK (ALT '&&'))) (RULE OU (BLOCK (ALT 'OR'))) (RULE NAO (BLOCK (ALT '!'))) (RULE IGUAL (BLOCK (ALT '=='))) (RULE DIFERENTE (BLOCK (ALT '!='))) (RULE MAIOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MAIOR_IGUAL (BLOCK (ALT '>='))) (RULE MENOR_IGUAL (BLOCK (ALT '<='))) (RULE SOMA (BLOCK (ALT '+'))) (RULE SUBTRACAO (BLOCK (ALT '-'))) (RULE MULTIPLICACAO (BLOCK (ALT '*'))) (RULE DIVISAO (BLOCK (ALT '/'))) (RULE MODULO (BLOCK (ALT '%'))) (RULE INCREMENTO (BLOCK (ALT '++'))) (RULE DECREMENTO (BLOCK (ALT '--'))) (RULE FIM_LINHA (BLOCK (ALT ';'))) (RULE INICIO_PARENTESES (BLOCK (ALT '('))) (RULE FIM_PARENTESES (BLOCK (ALT ')'))) (RULE INICIO_COLCHETE (BLOCK (ALT '['))) (RULE FIM_COLCHETE (BLOCK (ALT ']'))) (RULE INICIO_CHAVES (BLOCK (ALT '{'))) (RULE FIM_CHAVES (BLOCK (ALT '}'))) (RULE SEPARADOR_PARAMETRO (BLOCK (ALT ','))) (RULE SEPARADOR_DEFINICAO_VARIAVEL (BLOCK (ALT ':'))) (RULE DEFINICAO_INTEIRO (BLOCK (ALT (+ (BLOCK (ALT ZERO)))) (ALT (? (BLOCK (ALT SINAL))) (* (BLOCK (ALT ZERO))) NAO_ZERO (* (BLOCK (ALT NUMERO)))))) (RULE DEFINICAO_INTEIRO_POSITIVO (BLOCK (ALT (+ (BLOCK (ALT ZERO)))) (ALT (? (BLOCK (ALT POSITIVO))) (* (BLOCK (ALT ZERO))) NAO_ZERO (* (BLOCK (ALT NUMERO)))))) (RULE DEFINICAO_INTEIRO_NEGATIVO (BLOCK (ALT (+ (BLOCK (ALT ZERO)))) (ALT (? (BLOCK (ALT NEGATIVO))) (* (BLOCK (ALT ZERO))) NAO_ZERO (* (BLOCK (ALT NUMERO)))))) (RULE DEFINICAO_RACIONAL (BLOCK (ALT (+ (BLOCK (ALT ZERO))) '.' (+ (BLOCK (ALT ZERO)))) (ALT (? (BLOCK (ALT SINAL))) (* (BLOCK (ALT ZERO))) NAO_ZERO (* (BLOCK (ALT NUMERO))) '.' (+ (BLOCK (ALT NUMERO)))) (ALT (? (BLOCK (ALT SINAL))) (+ (BLOCK (ALT ZERO))) '.' (* (BLOCK (ALT NAO_ZERO))) NUMERO (* (BLOCK (ALT NAO_ZERO)))))) (RULE DEFINICAO_RACIONAL_POSITIVO (BLOCK (ALT (+ (BLOCK (ALT ZERO))) '.' (+ (BLOCK (ALT ZERO)))) (ALT (? (BLOCK (ALT POSITIVO))) (* (BLOCK (ALT ZERO))) NAO_ZERO (* (BLOCK (ALT NUMERO))) '.' (+ (BLOCK (ALT NUMERO)))) (ALT (? (BLOCK (ALT POSITIVO))) (+ (BLOCK (ALT ZERO))) '.' (* (BLOCK (ALT NAO_ZERO))) NUMERO (* (BLOCK (ALT NAO_ZERO)))))) (RULE DEFINICAO_RACIONAL_NEGATIVO (BLOCK (ALT ZERO '.' (+ (BLOCK (ALT ZERO)))) (ALT (? (BLOCK (ALT NEGATIVO))) (* (BLOCK (ALT ZERO))) NAO_ZERO (* (BLOCK (ALT NUMERO))) '.' (+ (BLOCK (ALT NUMERO)))) (ALT (? (BLOCK (ALT NEGATIVO))) (+ (BLOCK (ALT ZERO))) '.' (* (BLOCK (ALT NAO_ZERO))) NUMERO (* (BLOCK (ALT NAO_ZERO)))))) (RULE DEFINICAO_CARACTERE (BLOCK (ALT '\'' CARACTER '\''))) (RULE DEFINICAO_TEXTO (BLOCK (ALT '"' (* (BLOCK (ALT CARACTER))) '"'))) (RULE DEFINICAO_BOOLEANO (BLOCK (ALT VERDADEIRO) (ALT FALSO))) (RULE SINAL (RULEMODIFIERS fragment) (BLOCK (ALT POSITIVO) (ALT NEGATIVO))) (RULE POSITIVO (RULEMODIFIERS fragment) (BLOCK (ALT '+'))) (RULE NEGATIVO (RULEMODIFIERS fragment) (BLOCK (ALT '-'))) (RULE VERDADEIRO (RULEMODIFIERS fragment) (BLOCK (ALT 'verdadeiro'))) (RULE FALSO (RULEMODIFIERS fragment) (BLOCK (ALT 'falso'))) (RULE ZERO (RULEMODIFIERS fragment) (BLOCK (ALT '0'))) (RULE NAO_ZERO (RULEMODIFIERS fragment) (BLOCK (ALT [1-9]))) (RULE NUMERO (RULEMODIFIERS fragment) (BLOCK (ALT ZERO) (ALT NAO_ZERO))) (RULE LETRA (RULEMODIFIERS fragment) (BLOCK (ALT [_a-zA-Z]))) (RULE CARACTER (RULEMODIFIERS fragment) (BLOCK (ALT (~ (SET ['\\\n\r]))) (ALT ESCAPE))) (RULE ESCAPE (RULEMODIFIERS fragment) (BLOCK (ALT '\\' 'b') (ALT '\\' 't') (ALT '\\' 'n') (ALT '\\' 'f') (ALT '\\' 'r') (ALT '\\' '"') (ALT '\\' '\'') (ALT '\\' '\\'))) (RULE ID (BLOCK (ALT LETRA (* (BLOCK (ALT LETRA) (ALT NUMERO)))))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2021-07-03 19:33:01:085 grammar LogManager.java:25 after: (COMBINED_GRAMMAR Cirno (import Tokens) (RULES (RULE inicio (BLOCK (ALT PROCEDIMENTO VAZIO PROCEDIMENTOPRINCIPAL INICIO_PARENTESES (* (BLOCK (ALT declaracao))) FIM_PARENTESES INICIO_CHAVES blocoDeComando FIM_CHAVES))) (RULE declaracao (BLOCK (ALT tipoPrimitivo SEPARADOR_DEFINICAO_VARIAVEL ID FIM_LINHA))) (RULE atribuicao (BLOCK (ALT (= identifier ID) ATRIBUICAO (= identifier ID) FIM_LINHA))) (RULE declaracaoComAtribuicao (BLOCK (ALT tipoPrimitivo SEPARADOR_DEFINICAO_VARIAVEL ID ATRIBUICAO (= identifier ID) FIM_LINHA))) (RULE declaracaoDeVariavel (BLOCK (ALT (* (BLOCK (ALT declaracao) (ALT declaracaoComAtribuicao) (ALT atribuicao)))))) (RULE blocoDeComando (BLOCK (ALT declaracaoDeVariavel) (ALT 'comando') (ALT operacoes))) (RULE comando (BLOCK (ALT funcoes FIM_LINHA))) (RULE funcoes (BLOCK (ALT funcaoLer) (ALT funcaoEscrever))) (RULE funcaoLer (BLOCK (ALT LEIA INICIO_PARENTESES tipoPrimitivo FIM_PARENTESES))) (RULE funcaoEscrever (BLOCK (ALT IMPRIMA INICIO_PARENTESES (* (BLOCK (ALT tipoPrimitivo))) FIM_PARENTESES))) (RULE operacoes (BLOCK (ALT operacaoMatematicaInteiros))) (RULE operacaoMatematicaInteiros (BLOCK (ALT operacaoMatematicaInteiros operacaoAritmetica INTEIRO) (ALT INTEIRO operacaoAritmetica INTEIRO))) (RULE declaracoes (BLOCK (ALT declaracaoSe))) (RULE demostracaoCondicional (BLOCK (ALT INICIO_PARENTESES operacacaoLogica FIM_PARENTESES))) (RULE declaracaoSe (BLOCK (ALT inicioSe seEntao seContudoSe))) (RULE inicioSe (BLOCK (ALT SE demostracaoCondicional))) (RULE seEntao (BLOCK (ALT CONTUDO blocoDeComando))) (RULE seContudo (BLOCK (ALT CONTUDO blocoDeComando FIM_LINHA))) (RULE seContudoSe (BLOCK (ALT contudoSe) (ALT seContudo) (ALT FIM_LINHA))) (RULE contudoSe (BLOCK (ALT CONTUDO declaracaoSe))) (RULE operadorLogicoBinario (BLOCK (ALT (SET E OU)))) (RULE operadorLogicoUnitario (BLOCK (ALT NAO))) (RULE tipoPrimitivo (BLOCK (ALT (SET INTEIRO INTEIRO_POSITIVO INTEIRO_NEGATIVO RACIONAL RACIONAL_POSITIVO RACIONAL_NEGATIVO CARACTERE TEXTO BOOLEANO)))) (RULE operacaoAritmetica (BLOCK (ALT operacaoAdicao) (ALT operacaoMultiplicacao))) (RULE operacaoAdicao (BLOCK (ALT (SET SOMA SUBTRACAO)))) (RULE operacaoMultiplicacao (BLOCK (ALT (SET MULTIPLICACAO DIVISAO MODULO)))) (RULE operacaoRelacao (BLOCK (ALT operacaoIgualdade) (ALT operacaoComparacao))) (RULE operacaoIgualdade (BLOCK (ALT (SET IGUAL DIFERENTE MAIOR_IGUAL MENOR_IGUAL)))) (RULE operacaoComparacao (BLOCK (ALT (SET MAIOR MENOR)))) (RULE PROCEDIMENTO (BLOCK (ALT 'func'))) (RULE PROCEDIMENTOPRINCIPAL (BLOCK (ALT 'inicio'))) (RULE INTEIRO (BLOCK (ALT 'inteiro'))) (RULE INTEIRO_POSITIVO (BLOCK (ALT 'inteiro+'))) (RULE INTEIRO_NEGATIVO (BLOCK (ALT 'inteiro-'))) (RULE RACIONAL (BLOCK (ALT 'racional'))) (RULE RACIONAL_POSITIVO (BLOCK (ALT 'racional+'))) (RULE RACIONAL_NEGATIVO (BLOCK (ALT 'racional-'))) (RULE CARACTERE (BLOCK (ALT 'caractere'))) (RULE TEXTO (BLOCK (ALT 'texto'))) (RULE BOOLEANO (BLOCK (ALT 'booleano'))) (RULE VAZIO (BLOCK (ALT 'vazio'))) (RULE SE (BLOCK (ALT 'se'))) (RULE CONTUDO (BLOCK (ALT 'contudo'))) (RULE QUANDO (BLOCK (ALT 'quando'))) (RULE FINALIZE (BLOCK (ALT 'finalize'))) (RULE PARA (BLOCK (ALT 'para'))) (RULE ENQUANTO (BLOCK (ALT 'enquanto'))) (RULE EXECUTE (BLOCK (ALT 'execute'))) (RULE REPITA (BLOCK (ALT 'repita'))) (RULE ATRIBUICAO (BLOCK (ALT ':='))) (RULE RETORNO (BLOCK (ALT 'retorno'))) (RULE LEIA (BLOCK (ALT 'leia'))) (RULE IMPRIMA (BLOCK (ALT 'imprima'))) (RULE E (BLOCK (ALT '&&'))) (RULE OU (BLOCK (ALT 'OR'))) (RULE NAO (BLOCK (ALT '!'))) (RULE IGUAL (BLOCK (ALT '=='))) (RULE DIFERENTE (BLOCK (ALT '!='))) (RULE MAIOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MAIOR_IGUAL (BLOCK (ALT '>='))) (RULE MENOR_IGUAL (BLOCK (ALT '<='))) (RULE SOMA (BLOCK (ALT '+'))) (RULE SUBTRACAO (BLOCK (ALT '-'))) (RULE MULTIPLICACAO (BLOCK (ALT '*'))) (RULE DIVISAO (BLOCK (ALT '/'))) (RULE MODULO (BLOCK (ALT '%'))) (RULE INCREMENTO (BLOCK (ALT '++'))) (RULE DECREMENTO (BLOCK (ALT '--'))) (RULE FIM_LINHA (BLOCK (ALT ';'))) (RULE INICIO_PARENTESES (BLOCK (ALT '('))) (RULE FIM_PARENTESES (BLOCK (ALT ')'))) (RULE INICIO_COLCHETE (BLOCK (ALT '['))) (RULE FIM_COLCHETE (BLOCK (ALT ']'))) (RULE INICIO_CHAVES (BLOCK (ALT '{'))) (RULE FIM_CHAVES (BLOCK (ALT '}'))) (RULE SEPARADOR_PARAMETRO (BLOCK (ALT ','))) (RULE SEPARADOR_DEFINICAO_VARIAVEL (BLOCK (ALT ':'))) (RULE DEFINICAO_INTEIRO (BLOCK (ALT (+ (BLOCK (ALT ZERO)))) (ALT (? (BLOCK (ALT SINAL))) (* (BLOCK (ALT ZERO))) NAO_ZERO (* (BLOCK (ALT NUMERO)))))) (RULE DEFINICAO_INTEIRO_POSITIVO (BLOCK (ALT (+ (BLOCK (ALT ZERO)))) (ALT (? (BLOCK (ALT POSITIVO))) (* (BLOCK (ALT ZERO))) NAO_ZERO (* (BLOCK (ALT NUMERO)))))) (RULE DEFINICAO_INTEIRO_NEGATIVO (BLOCK (ALT (+ (BLOCK (ALT ZERO)))) (ALT (? (BLOCK (ALT NEGATIVO))) (* (BLOCK (ALT ZERO))) NAO_ZERO (* (BLOCK (ALT NUMERO)))))) (RULE DEFINICAO_RACIONAL (BLOCK (ALT (+ (BLOCK (ALT ZERO))) '.' (+ (BLOCK (ALT ZERO)))) (ALT (? (BLOCK (ALT SINAL))) (* (BLOCK (ALT ZERO))) NAO_ZERO (* (BLOCK (ALT NUMERO))) '.' (+ (BLOCK (ALT NUMERO)))) (ALT (? (BLOCK (ALT SINAL))) (+ (BLOCK (ALT ZERO))) '.' (* (BLOCK (ALT NAO_ZERO))) NUMERO (* (BLOCK (ALT NAO_ZERO)))))) (RULE DEFINICAO_RACIONAL_POSITIVO (BLOCK (ALT (+ (BLOCK (ALT ZERO))) '.' (+ (BLOCK (ALT ZERO)))) (ALT (? (BLOCK (ALT POSITIVO))) (* (BLOCK (ALT ZERO))) NAO_ZERO (* (BLOCK (ALT NUMERO))) '.' (+ (BLOCK (ALT NUMERO)))) (ALT (? (BLOCK (ALT POSITIVO))) (+ (BLOCK (ALT ZERO))) '.' (* (BLOCK (ALT NAO_ZERO))) NUMERO (* (BLOCK (ALT NAO_ZERO)))))) (RULE DEFINICAO_RACIONAL_NEGATIVO (BLOCK (ALT ZERO '.' (+ (BLOCK (ALT ZERO)))) (ALT (? (BLOCK (ALT NEGATIVO))) (* (BLOCK (ALT ZERO))) NAO_ZERO (* (BLOCK (ALT NUMERO))) '.' (+ (BLOCK (ALT NUMERO)))) (ALT (? (BLOCK (ALT NEGATIVO))) (+ (BLOCK (ALT ZERO))) '.' (* (BLOCK (ALT NAO_ZERO))) NUMERO (* (BLOCK (ALT NAO_ZERO)))))) (RULE DEFINICAO_CARACTERE (BLOCK (ALT '\'' CARACTER '\''))) (RULE DEFINICAO_TEXTO (BLOCK (ALT '"' (* (BLOCK (ALT CARACTER))) '"'))) (RULE DEFINICAO_BOOLEANO (BLOCK (ALT VERDADEIRO) (ALT FALSO))) (RULE SINAL (RULEMODIFIERS fragment) (BLOCK (ALT POSITIVO) (ALT NEGATIVO))) (RULE POSITIVO (RULEMODIFIERS fragment) (BLOCK (ALT '+'))) (RULE NEGATIVO (RULEMODIFIERS fragment) (BLOCK (ALT '-'))) (RULE VERDADEIRO (RULEMODIFIERS fragment) (BLOCK (ALT 'verdadeiro'))) (RULE FALSO (RULEMODIFIERS fragment) (BLOCK (ALT 'falso'))) (RULE ZERO (RULEMODIFIERS fragment) (BLOCK (ALT '0'))) (RULE NAO_ZERO (RULEMODIFIERS fragment) (BLOCK (ALT [1-9]))) (RULE NUMERO (RULEMODIFIERS fragment) (BLOCK (ALT ZERO) (ALT NAO_ZERO))) (RULE LETRA (RULEMODIFIERS fragment) (BLOCK (ALT [_a-zA-Z]))) (RULE CARACTER (RULEMODIFIERS fragment) (BLOCK (ALT (~ (SET ['\\\n\r]))) (ALT ESCAPE))) (RULE ESCAPE (RULEMODIFIERS fragment) (BLOCK (ALT '\\' 'b') (ALT '\\' 't') (ALT '\\' 'n') (ALT '\\' 'f') (ALT '\\' 'r') (ALT '\\' '"') (ALT '\\' '\'') (ALT '\\' '\\'))) (RULE ID (BLOCK (ALT LETRA (* (BLOCK (ALT LETRA) (ALT NUMERO)))))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2021-07-03 19:33:01:101 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR Cirno (import Tokens) (RULES (RULE inicio (BLOCK (ALT PROCEDIMENTO VAZIO PROCEDIMENTOPRINCIPAL INICIO_PARENTESES (* (BLOCK (ALT declaracao))) FIM_PARENTESES INICIO_CHAVES blocoDeComando FIM_CHAVES))) (RULE declaracao (BLOCK (ALT tipoPrimitivo SEPARADOR_DEFINICAO_VARIAVEL ID FIM_LINHA))) (RULE atribuicao (BLOCK (ALT (= identifier ID) ATRIBUICAO (= identifier ID) FIM_LINHA))) (RULE declaracaoComAtribuicao (BLOCK (ALT tipoPrimitivo SEPARADOR_DEFINICAO_VARIAVEL ID ATRIBUICAO (= identifier ID) FIM_LINHA))) (RULE declaracaoDeVariavel (BLOCK (ALT (* (BLOCK (ALT declaracao) (ALT declaracaoComAtribuicao) (ALT atribuicao)))))) (RULE blocoDeComando (BLOCK (ALT declaracaoDeVariavel) (ALT 'comando') (ALT operacoes))) (RULE comando (BLOCK (ALT funcoes FIM_LINHA))) (RULE funcoes (BLOCK (ALT funcaoLer) (ALT funcaoEscrever))) (RULE funcaoLer (BLOCK (ALT LEIA INICIO_PARENTESES tipoPrimitivo FIM_PARENTESES))) (RULE funcaoEscrever (BLOCK (ALT IMPRIMA INICIO_PARENTESES (* (BLOCK (ALT tipoPrimitivo))) FIM_PARENTESES))) (RULE operacoes (BLOCK (ALT operacaoMatematicaInteiros))) (RULE operacaoMatematicaInteiros (BLOCK (ALT operacaoMatematicaInteiros operacaoAritmetica INTEIRO) (ALT INTEIRO operacaoAritmetica INTEIRO))) (RULE declaracoes (BLOCK (ALT declaracaoSe))) (RULE demostracaoCondicional (BLOCK (ALT INICIO_PARENTESES operacacaoLogica FIM_PARENTESES))) (RULE declaracaoSe (BLOCK (ALT inicioSe seEntao seContudoSe))) (RULE inicioSe (BLOCK (ALT SE demostracaoCondicional))) (RULE seEntao (BLOCK (ALT CONTUDO blocoDeComando))) (RULE seContudo (BLOCK (ALT CONTUDO blocoDeComando FIM_LINHA))) (RULE seContudoSe (BLOCK (ALT contudoSe) (ALT seContudo) (ALT FIM_LINHA))) (RULE contudoSe (BLOCK (ALT CONTUDO declaracaoSe))) (RULE operadorLogicoBinario (BLOCK (ALT (SET E OU)))) (RULE operadorLogicoUnitario (BLOCK (ALT NAO))) (RULE tipoPrimitivo (BLOCK (ALT (SET INTEIRO INTEIRO_POSITIVO INTEIRO_NEGATIVO RACIONAL RACIONAL_POSITIVO RACIONAL_NEGATIVO CARACTERE TEXTO BOOLEANO)))) (RULE operacaoAritmetica (BLOCK (ALT operacaoAdicao) (ALT operacaoMultiplicacao))) (RULE operacaoAdicao (BLOCK (ALT (SET SOMA SUBTRACAO)))) (RULE operacaoMultiplicacao (BLOCK (ALT (SET MULTIPLICACAO DIVISAO MODULO)))) (RULE operacaoRelacao (BLOCK (ALT operacaoIgualdade) (ALT operacaoComparacao))) (RULE operacaoIgualdade (BLOCK (ALT (SET IGUAL DIFERENTE MAIOR_IGUAL MENOR_IGUAL)))) (RULE operacaoComparacao (BLOCK (ALT (SET MAIOR MENOR))))))
2021-07-03 19:33:01:101 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR CirnoLexer (RULES (RULE T__0 (BLOCK (ALT 'comando'))) (RULE PROCEDIMENTO (BLOCK (ALT 'func'))) (RULE PROCEDIMENTOPRINCIPAL (BLOCK (ALT 'inicio'))) (RULE INTEIRO (BLOCK (ALT 'inteiro'))) (RULE INTEIRO_POSITIVO (BLOCK (ALT 'inteiro+'))) (RULE INTEIRO_NEGATIVO (BLOCK (ALT 'inteiro-'))) (RULE RACIONAL (BLOCK (ALT 'racional'))) (RULE RACIONAL_POSITIVO (BLOCK (ALT 'racional+'))) (RULE RACIONAL_NEGATIVO (BLOCK (ALT 'racional-'))) (RULE CARACTERE (BLOCK (ALT 'caractere'))) (RULE TEXTO (BLOCK (ALT 'texto'))) (RULE BOOLEANO (BLOCK (ALT 'booleano'))) (RULE VAZIO (BLOCK (ALT 'vazio'))) (RULE SE (BLOCK (ALT 'se'))) (RULE CONTUDO (BLOCK (ALT 'contudo'))) (RULE QUANDO (BLOCK (ALT 'quando'))) (RULE FINALIZE (BLOCK (ALT 'finalize'))) (RULE PARA (BLOCK (ALT 'para'))) (RULE ENQUANTO (BLOCK (ALT 'enquanto'))) (RULE EXECUTE (BLOCK (ALT 'execute'))) (RULE REPITA (BLOCK (ALT 'repita'))) (RULE ATRIBUICAO (BLOCK (ALT ':='))) (RULE RETORNO (BLOCK (ALT 'retorno'))) (RULE LEIA (BLOCK (ALT 'leia'))) (RULE IMPRIMA (BLOCK (ALT 'imprima'))) (RULE E (BLOCK (ALT '&&'))) (RULE OU (BLOCK (ALT 'OR'))) (RULE NAO (BLOCK (ALT '!'))) (RULE IGUAL (BLOCK (ALT '=='))) (RULE DIFERENTE (BLOCK (ALT '!='))) (RULE MAIOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MAIOR_IGUAL (BLOCK (ALT '>='))) (RULE MENOR_IGUAL (BLOCK (ALT '<='))) (RULE SOMA (BLOCK (ALT '+'))) (RULE SUBTRACAO (BLOCK (ALT '-'))) (RULE MULTIPLICACAO (BLOCK (ALT '*'))) (RULE DIVISAO (BLOCK (ALT '/'))) (RULE MODULO (BLOCK (ALT '%'))) (RULE INCREMENTO (BLOCK (ALT '++'))) (RULE DECREMENTO (BLOCK (ALT '--'))) (RULE FIM_LINHA (BLOCK (ALT ';'))) (RULE INICIO_PARENTESES (BLOCK (ALT '('))) (RULE FIM_PARENTESES (BLOCK (ALT ')'))) (RULE INICIO_COLCHETE (BLOCK (ALT '['))) (RULE FIM_COLCHETE (BLOCK (ALT ']'))) (RULE INICIO_CHAVES (BLOCK (ALT '{'))) (RULE FIM_CHAVES (BLOCK (ALT '}'))) (RULE SEPARADOR_PARAMETRO (BLOCK (ALT ','))) (RULE SEPARADOR_DEFINICAO_VARIAVEL (BLOCK (ALT ':'))) (RULE DEFINICAO_INTEIRO (BLOCK (ALT (+ (BLOCK (ALT ZERO)))) (ALT (? (BLOCK (ALT SINAL))) (* (BLOCK (ALT ZERO))) NAO_ZERO (* (BLOCK (ALT NUMERO)))))) (RULE DEFINICAO_INTEIRO_POSITIVO (BLOCK (ALT (+ (BLOCK (ALT ZERO)))) (ALT (? (BLOCK (ALT POSITIVO))) (* (BLOCK (ALT ZERO))) NAO_ZERO (* (BLOCK (ALT NUMERO)))))) (RULE DEFINICAO_INTEIRO_NEGATIVO (BLOCK (ALT (+ (BLOCK (ALT ZERO)))) (ALT (? (BLOCK (ALT NEGATIVO))) (* (BLOCK (ALT ZERO))) NAO_ZERO (* (BLOCK (ALT NUMERO)))))) (RULE DEFINICAO_RACIONAL (BLOCK (ALT (+ (BLOCK (ALT ZERO))) '.' (+ (BLOCK (ALT ZERO)))) (ALT (? (BLOCK (ALT SINAL))) (* (BLOCK (ALT ZERO))) NAO_ZERO (* (BLOCK (ALT NUMERO))) '.' (+ (BLOCK (ALT NUMERO)))) (ALT (? (BLOCK (ALT SINAL))) (+ (BLOCK (ALT ZERO))) '.' (* (BLOCK (ALT NAO_ZERO))) NUMERO (* (BLOCK (ALT NAO_ZERO)))))) (RULE DEFINICAO_RACIONAL_POSITIVO (BLOCK (ALT (+ (BLOCK (ALT ZERO))) '.' (+ (BLOCK (ALT ZERO)))) (ALT (? (BLOCK (ALT POSITIVO))) (* (BLOCK (ALT ZERO))) NAO_ZERO (* (BLOCK (ALT NUMERO))) '.' (+ (BLOCK (ALT NUMERO)))) (ALT (? (BLOCK (ALT POSITIVO))) (+ (BLOCK (ALT ZERO))) '.' (* (BLOCK (ALT NAO_ZERO))) NUMERO (* (BLOCK (ALT NAO_ZERO)))))) (RULE DEFINICAO_RACIONAL_NEGATIVO (BLOCK (ALT ZERO '.' (+ (BLOCK (ALT ZERO)))) (ALT (? (BLOCK (ALT NEGATIVO))) (* (BLOCK (ALT ZERO))) NAO_ZERO (* (BLOCK (ALT NUMERO))) '.' (+ (BLOCK (ALT NUMERO)))) (ALT (? (BLOCK (ALT NEGATIVO))) (+ (BLOCK (ALT ZERO))) '.' (* (BLOCK (ALT NAO_ZERO))) NUMERO (* (BLOCK (ALT NAO_ZERO)))))) (RULE DEFINICAO_CARACTERE (BLOCK (ALT '\'' CARACTER '\''))) (RULE DEFINICAO_TEXTO (BLOCK (ALT '"' (* (BLOCK (ALT CARACTER))) '"'))) (RULE DEFINICAO_BOOLEANO (BLOCK (ALT VERDADEIRO) (ALT FALSO))) (RULE SINAL (RULEMODIFIERS fragment) (BLOCK (ALT POSITIVO) (ALT NEGATIVO))) (RULE POSITIVO (RULEMODIFIERS fragment) (BLOCK (ALT '+'))) (RULE NEGATIVO (RULEMODIFIERS fragment) (BLOCK (ALT '-'))) (RULE VERDADEIRO (RULEMODIFIERS fragment) (BLOCK (ALT 'verdadeiro'))) (RULE FALSO (RULEMODIFIERS fragment) (BLOCK (ALT 'falso'))) (RULE ZERO (RULEMODIFIERS fragment) (BLOCK (ALT '0'))) (RULE NAO_ZERO (RULEMODIFIERS fragment) (BLOCK (ALT [1-9]))) (RULE NUMERO (RULEMODIFIERS fragment) (BLOCK (ALT ZERO) (ALT NAO_ZERO))) (RULE LETRA (RULEMODIFIERS fragment) (BLOCK (ALT [_a-zA-Z]))) (RULE CARACTER (RULEMODIFIERS fragment) (BLOCK (ALT (~ (SET ['\\\n\r]))) (ALT ESCAPE))) (RULE ESCAPE (RULEMODIFIERS fragment) (BLOCK (ALT '\\' 'b') (ALT '\\' 't') (ALT '\\' 'n') (ALT '\\' 'f') (ALT '\\' 'r') (ALT '\\' '"') (ALT '\\' '\'') (ALT '\\' '\\'))) (RULE ID (BLOCK (ALT LETRA (* (BLOCK (ALT LETRA) (ALT NUMERO)))))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
